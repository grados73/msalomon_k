
01_msalomon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007988  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b3c  08007b3c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b44  08007b44  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000090  08007bdc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08007bdc  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cdf  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ab0  00000000  00000000  00039d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  0003d850  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  0003e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019784  00000000  00000000  0003f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000164b1  00000000  00000000  00059124  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e1b2  00000000  00000000  0006f5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd787  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000fd804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b08 	.word	0x08007b08

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08007b08 	.word	0x08007b08

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b60      	ldr	r3, [pc, #384]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a5f      	ldr	r2, [pc, #380]	; (8000674 <MX_GPIO_Init+0x19c>)
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b5d      	ldr	r3, [pc, #372]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0310 	and.w	r3, r3, #16
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b59      	ldr	r3, [pc, #356]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a58      	ldr	r2, [pc, #352]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b56      	ldr	r3, [pc, #344]	; (8000674 <MX_GPIO_Init+0x19c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b52      	ldr	r3, [pc, #328]	; (8000674 <MX_GPIO_Init+0x19c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a51      	ldr	r2, [pc, #324]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b4f      	ldr	r3, [pc, #316]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b4b      	ldr	r3, [pc, #300]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a4a      	ldr	r2, [pc, #296]	; (8000674 <MX_GPIO_Init+0x19c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b44      	ldr	r3, [pc, #272]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a43      	ldr	r2, [pc, #268]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b41      	ldr	r3, [pc, #260]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a3c      	ldr	r2, [pc, #240]	; (8000674 <MX_GPIO_Init+0x19c>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_GPIO_Init+0x19c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4837      	ldr	r0, [pc, #220]	; (8000678 <MX_GPIO_Init+0x1a0>)
 800059c:	f000 ff6c 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2101      	movs	r1, #1
 80005a4:	4835      	ldr	r0, [pc, #212]	; (800067c <MX_GPIO_Init+0x1a4>)
 80005a6:	f000 ff67 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005aa:	2200      	movs	r2, #0
 80005ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b0:	4833      	ldr	r0, [pc, #204]	; (8000680 <MX_GPIO_Init+0x1a8>)
 80005b2:	f000 ff61 	bl	8001478 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b6:	2304      	movs	r3, #4
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	482b      	ldr	r0, [pc, #172]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005ca:	f000 fdd3 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005e6:	f000 fdc5 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005ea:	2332      	movs	r3, #50	; 0x32
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ee:	4b25      	ldr	r3, [pc, #148]	; (8000684 <MX_GPIO_Init+0x1ac>)
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <MX_GPIO_Init+0x1a0>)
 80005fe:	f000 fdb9 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <MX_GPIO_Init+0x1a4>)
 800061a:	f000 fdab 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000622:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_GPIO_Init+0x1ac>)
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <MX_GPIO_Init+0x1b0>)
 8000632:	f000 fd9f 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000650:	f000 fd90 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_GPIO_Init+0x1a8>)
 8000668:	f000 fd84 	bl	8001174 <HAL_GPIO_Init>

}
 800066c:	bf00      	nop
 800066e:	3730      	adds	r7, #48	; 0x30
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020800 	.word	0x40020800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	10120000 	.word	0x10120000
 8000688:	40020000 	.word	0x40020000

0800068c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f002 fbfb 	bl	8002ec4 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 fa54 	bl	8000b80 <Error_Handler>
  }

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000c0 	.word	0x200000c0
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a19      	ldr	r2, [pc, #100]	; (800076c <HAL_I2C_MspInit+0x84>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d12c      	bne.n	8000764 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000726:	f44f 7310 	mov.w	r3, #576	; 0x240
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800072c:	2312      	movs	r3, #18
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000730:	2301      	movs	r3, #1
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000738:	2304      	movs	r3, #4
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <HAL_I2C_MspInit+0x8c>)
 8000744:	f000 fd16 	bl	8001174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_I2C_MspInit+0x88>)
 8000752:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_I2C_MspInit+0x88>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40005400 	.word	0x40005400
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400

08000778 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2S2_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2S2_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2S2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2S2_Init+0x50>)
 800079e:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <MX_I2S2_Init+0x58>)
 80007a0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2S2_Init+0x50>)
 80007b6:	f002 fcbd 	bl	8003134 <HAL_I2S_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 f9de 	bl	8000b80 <Error_Handler>
  }

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000114 	.word	0x20000114
 80007cc:	40003800 	.word	0x40003800
 80007d0:	00017700 	.word	0x00017700

080007d4 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  hi2s3.Instance = SPI3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_I2S3_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <MX_I2S3_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_I2S3_Init+0x54>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2S3_Init+0x54>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_I2S3_Init+0x54>)
 80007f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_I2S3_Init+0x54>)
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <MX_I2S3_Init+0x5c>)
 80007fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2S3_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_I2S3_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_I2S3_Init+0x54>)
 8000814:	f002 fc8e 	bl	8003134 <HAL_I2S_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800081e:	f000 f9af 	bl	8000b80 <Error_Handler>
  }

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000015c 	.word	0x2000015c
 800082c:	40003c00 	.word	0x40003c00
 8000830:	00017700 	.word	0x00017700

08000834 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a59      	ldr	r2, [pc, #356]	; (80009b8 <HAL_I2S_MspInit+0x184>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d15b      	bne.n	800090e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	4b58      	ldr	r3, [pc, #352]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086e:	623b      	str	r3, [r7, #32]
 8000870:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a50      	ldr	r2, [pc, #320]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a49      	ldr	r2, [pc, #292]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b47      	ldr	r3, [pc, #284]	; (80009bc <HAL_I2S_MspInit+0x188>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008aa:	2304      	movs	r3, #4
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008ba:	2306      	movs	r3, #6
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	483e      	ldr	r0, [pc, #248]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008c6:	f000 fc55 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4836      	ldr	r0, [pc, #216]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80008e6:	f000 fc45 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fc:	2305      	movs	r3, #5
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	482f      	ldr	r0, [pc, #188]	; (80009c4 <HAL_I2S_MspInit+0x190>)
 8000908:	f000 fc34 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800090c:	e04f      	b.n	80009ae <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <HAL_I2S_MspInit+0x194>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d14a      	bne.n	80009ae <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6313      	str	r3, [r2, #48]	; 0x30
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a18      	ldr	r2, [pc, #96]	; (80009bc <HAL_I2S_MspInit+0x188>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b16      	ldr	r3, [pc, #88]	; (80009bc <HAL_I2S_MspInit+0x188>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800096c:	2310      	movs	r3, #16
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097c:	2306      	movs	r3, #6
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <HAL_I2S_MspInit+0x198>)
 8000988:	f000 fbf4 	bl	8001174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800098c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099e:	2306      	movs	r3, #6
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_I2S_MspInit+0x18c>)
 80009aa:	f000 fbe3 	bl	8001174 <HAL_GPIO_Init>
}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40003800 	.word	0x40003800
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020400 	.word	0x40020400
 80009c8:	40003c00 	.word	0x40003c00
 80009cc:	40020000 	.word	0x40020000

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fa28 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f84e 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f7ff fd7c 	bl	80004d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009e0:	f7ff fe54 	bl	800068c <MX_I2C1_Init>
  MX_I2S2_Init();
 80009e4:	f7ff fec8 	bl	8000778 <MX_I2S2_Init>
  MX_I2S3_Init();
 80009e8:	f7ff fef4 	bl	80007d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ec:	f000 f8cc 	bl	8000b88 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009f0:	f006 fc86 	bl	8007300 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	481e      	ldr	r0, [pc, #120]	; (8000a74 <main+0xa4>)
 80009fc:	f000 fd3c 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port,LD4_Pin, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <main+0xa4>)
 8000a08:	f000 fd36 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <main+0xa4>)
 8000a14:	f000 fd30 	bl	8001478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD6_GPIO_Port,LD6_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <main+0xa4>)
 8000a20:	f000 fd2a 	bl	8001478 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <main+0xa4>)
 8000a2a:	f000 fd3e 	bl	80014aa <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000a2e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a32:	f000 fa6b 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD4_Pin);
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	480e      	ldr	r0, [pc, #56]	; (8000a74 <main+0xa4>)
 8000a3c:	f000 fd35 	bl	80014aa <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000a40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a44:	f000 fa62 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <main+0xa4>)
 8000a4e:	f000 fd2c 	bl	80014aa <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000a52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a56:	f000 fa59 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <main+0xa4>)
 8000a60:	f000 fd23 	bl	80014aa <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8000a64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a68:	f000 fa50 	bl	8000f0c <HAL_Delay>


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a6c:	f006 fc6e 	bl	800734c <MX_USB_HOST_Process>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a70:	e7d8      	b.n	8000a24 <main+0x54>
 8000a72:	bf00      	nop
 8000a74:	40020c00 	.word	0x40020c00

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09a      	sub	sp, #104	; 0x68
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 ff7c 	bl	8007984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <SystemClock_Config+0x100>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <SystemClock_Config+0x100>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemClock_Config+0x100>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <SystemClock_Config+0x104>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <SystemClock_Config+0x104>)
 8000ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <SystemClock_Config+0x104>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	2302      	movs	r3, #2
 8000af2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afa:	2304      	movs	r3, #4
 8000afc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000afe:	2360      	movs	r3, #96	; 0x60
 8000b00:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b06:	2304      	movs	r3, #4
 8000b08:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 ffb0 	bl	8003a74 <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1a:	f000 f831 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 fa0a 	bl	8003f54 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b46:	f000 f81b 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b4e:	23c8      	movs	r3, #200	; 0xc8
 8000b50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b52:	2305      	movs	r3, #5
 8000b54:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fbd6 	bl	8004310 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000b6a:	f000 f809 	bl	8000b80 <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3768      	adds	r7, #104	; 0x68
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <Error_Handler+0x6>

08000b88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_SPI1_Init+0x64>)
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <MX_SPI1_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_SPI1_Init+0x64>)
 8000b94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_SPI1_Init+0x64>)
 8000bda:	f003 fce7 	bl	80045ac <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be4:	f7ff ffcc 	bl	8000b80 <Error_Handler>
  }

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001a4 	.word	0x200001a4
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <HAL_SPI_MspInit+0x84>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12b      	bne.n	8000c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a10      	ldr	r2, [pc, #64]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <HAL_SPI_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4e:	23e0      	movs	r3, #224	; 0xe0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_SPI_MspInit+0x8c>)
 8000c6a:	f000 fa83 	bl	8001174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	; 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f000 fa14 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler+0x4>

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f8d4 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <OTG_FS_IRQHandler+0x10>)
 8000d2e:	f000 fe67 	bl	8001a00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200005d8 	.word	0x200005d8

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f006 fdd0 	bl	8007910 <__errno>
 8000d70:	4602      	mov	r2, r0
 8000d72:	230c      	movs	r3, #12
 8000d74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20020000 	.word	0x20020000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200000ac 	.word	0x200000ac
 8000da4:	200008a0 	.word	0x200008a0

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <SystemInit+0x28>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <SystemInit+0x28>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SystemInit+0x28>)
 8000dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dda:	e003      	b.n	8000de4 <LoopCopyDataInit>

08000ddc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000de0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000de2:	3104      	adds	r1, #4

08000de4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000de8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dec:	d3f6      	bcc.n	8000ddc <CopyDataInit>
  ldr  r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000df0:	e002      	b.n	8000df8 <LoopFillZerobss>

08000df2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000df2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000df4:	f842 3b04 	str.w	r3, [r2], #4

08000df8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dfc:	d3f9      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ffd3 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f006 fd8b 	bl	800791c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fde3 	bl	80009d0 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e10:	08007b4c 	.word	0x08007b4c
  ldr  r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e18:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000e1c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000e20:	200008a0 	.word	0x200008a0

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f94d 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff ff12 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f965 	bl	800115a <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f92d 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	200001fc 	.word	0x200001fc

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200001fc 	.word	0x200001fc

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_Delay+0x40>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4907      	ldr	r1, [pc, #28]	; (8000fec <__NVIC_EnableIRQ+0x38>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff29 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff3e 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff31 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e159      	b.n	8001444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8148 	bne.w	800143e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d00b      	beq.n	80011ce <HAL_GPIO_Init+0x5a>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011c2:	2b11      	cmp	r3, #17
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0xfc>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b12      	cmp	r3, #18
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a2 	beq.w	800143e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b56      	ldr	r3, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x2e4>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a55      	ldr	r2, [pc, #340]	; (8001458 <HAL_GPIO_Init+0x2e4>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_GPIO_Init+0x2e4>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x2e8>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2ec>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x202>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x1fe>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2f4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x1fa>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_GPIO_Init+0x2f8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x1f6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a44      	ldr	r2, [pc, #272]	; (8001470 <HAL_GPIO_Init+0x2fc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x1f2>
 8001362:	2304      	movs	r3, #4
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001366:	2307      	movs	r3, #7
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x204>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x204>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4934      	ldr	r1, [pc, #208]	; (800145c <HAL_GPIO_Init+0x2e8>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ba:	4a2e      	ldr	r2, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x300>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_GPIO_Init+0x300>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_GPIO_Init+0x300>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_GPIO_Init+0x300>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_GPIO_Init+0x300>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_GPIO_Init+0x300>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f aea2 	bls.w	8001190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	401a      	ands	r2, r3
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d104      	bne.n	80014ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b08f      	sub	sp, #60	; 0x3c
 80014e4:	af0a      	add	r7, sp, #40	; 0x28
 80014e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e054      	b.n	800159c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d106      	bne.n	8001512 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f005 ff55 	bl	80073bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2203      	movs	r2, #3
 8001516:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f003 f911 	bl	8004758 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	687e      	ldr	r6, [r7, #4]
 800153e:	466d      	mov	r5, sp
 8001540:	f106 0410 	add.w	r4, r6, #16
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001550:	e885 0003 	stmia.w	r5, {r0, r1}
 8001554:	1d33      	adds	r3, r6, #4
 8001556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f003 f88b 	bl	8004674 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f003 f908 	bl	800477a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	687e      	ldr	r6, [r7, #4]
 8001572:	466d      	mov	r5, sp
 8001574:	f106 0410 	add.w	r4, r6, #16
 8001578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001584:	e885 0003 	stmia.w	r5, {r0, r1}
 8001588:	1d33      	adds	r3, r6, #4
 800158a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f003 fa1b 	bl	80049c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015a4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70bb      	strb	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_HCD_HC_Init+0x28>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e07f      	b.n	80016cc <HAL_HCD_HC_Init+0x128>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	333d      	adds	r3, #61	; 0x3d
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015e8:	78fa      	ldrb	r2, [r7, #3]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3338      	adds	r3, #56	; 0x38
 80015f8:	787a      	ldrb	r2, [r7, #1]
 80015fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3340      	adds	r3, #64	; 0x40
 800160c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800160e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3339      	adds	r3, #57	; 0x39
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	333f      	adds	r3, #63	; 0x3f
 8001634:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	78bb      	ldrb	r3, [r7, #2]
 800163e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001642:	b2d8      	uxtb	r0, r3
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	333a      	adds	r3, #58	; 0x3a
 8001652:	4602      	mov	r2, r0
 8001654:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da0a      	bge.n	8001674 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	333b      	adds	r3, #59	; 0x3b
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e009      	b.n	8001688 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	333b      	adds	r3, #59	; 0x3b
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	333c      	adds	r3, #60	; 0x3c
 8001698:	f897 2020 	ldrb.w	r2, [r7, #32]
 800169c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	787c      	ldrb	r4, [r7, #1]
 80016a4:	78ba      	ldrb	r2, [r7, #2]
 80016a6:	78f9      	ldrb	r1, [r7, #3]
 80016a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4623      	mov	r3, r4
 80016ba:	f003 fb07 	bl	8004ccc <USB_HC_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}

080016d4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_HCD_HC_Halt+0x1e>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e00f      	b.n	8001712 <HAL_HCD_HC_Halt+0x3e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fd43 	bl	800518e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4603      	mov	r3, r0
 800172c:	70fb      	strb	r3, [r7, #3]
 800172e:	460b      	mov	r3, r1
 8001730:	70bb      	strb	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	333b      	adds	r3, #59	; 0x3b
 8001746:	78ba      	ldrb	r2, [r7, #2]
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	333f      	adds	r3, #63	; 0x3f
 800175a:	787a      	ldrb	r2, [r7, #1]
 800175c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800175e:	7c3b      	ldrb	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d114      	bne.n	800178e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	440b      	add	r3, r1
 8001772:	3342      	adds	r3, #66	; 0x42
 8001774:	2203      	movs	r2, #3
 8001776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	333d      	adds	r3, #61	; 0x3d
 8001788:	7f3a      	ldrb	r2, [r7, #28]
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e009      	b.n	80017a2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	3342      	adds	r3, #66	; 0x42
 800179e:	2202      	movs	r2, #2
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017a2:	787b      	ldrb	r3, [r7, #1]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	f200 80d6 	bhi.w	8001956 <HAL_HCD_HC_SubmitRequest+0x23a>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	08001941 	.word	0x08001941
 80017b8:	0800182d 	.word	0x0800182d
 80017bc:	080018b7 	.word	0x080018b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80017c0:	7c3b      	ldrb	r3, [r7, #16]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	f040 80c9 	bne.w	800195a <HAL_HCD_HC_SubmitRequest+0x23e>
 80017c8:	78bb      	ldrb	r3, [r7, #2]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80c5 	bne.w	800195a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80017d0:	8b3b      	ldrh	r3, [r7, #24]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3351      	adds	r3, #81	; 0x51
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3351      	adds	r3, #81	; 0x51
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10a      	bne.n	8001816 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3342      	adds	r3, #66	; 0x42
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001814:	e0a1      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	3342      	adds	r3, #66	; 0x42
 8001826:	2202      	movs	r2, #2
 8001828:	701a      	strb	r2, [r3, #0]
      break;
 800182a:	e096      	b.n	800195a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d120      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	3351      	adds	r3, #81	; 0x51
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3342      	adds	r3, #66	; 0x42
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800185c:	e07e      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	e073      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3350      	adds	r3, #80	; 0x50
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10a      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e05d      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3342      	adds	r3, #66	; 0x42
 80018b0:	2202      	movs	r2, #2
 80018b2:	701a      	strb	r2, [r3, #0]
      break;
 80018b4:	e052      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018b6:	78bb      	ldrb	r3, [r7, #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d120      	bne.n	80018fe <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3351      	adds	r3, #81	; 0x51
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10a      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3342      	adds	r3, #66	; 0x42
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018e6:	e039      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3342      	adds	r3, #66	; 0x42
 80018f8:	2202      	movs	r2, #2
 80018fa:	701a      	strb	r2, [r3, #0]
      break;
 80018fc:	e02e      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3350      	adds	r3, #80	; 0x50
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e018      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3342      	adds	r3, #66	; 0x42
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
      break;
 800193e:	e00d      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3342      	adds	r3, #66	; 0x42
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e002      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800195a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800195c:	78fa      	ldrb	r2, [r7, #3]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3344      	adds	r3, #68	; 0x44
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001970:	78fa      	ldrb	r2, [r7, #3]
 8001972:	8b39      	ldrh	r1, [r7, #24]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4403      	add	r3, r0
 8001980:	3348      	adds	r3, #72	; 0x48
 8001982:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	335c      	adds	r3, #92	; 0x5c
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	334c      	adds	r3, #76	; 0x4c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3339      	adds	r3, #57	; 0x39
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	335d      	adds	r3, #93	; 0x5d
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	3338      	adds	r3, #56	; 0x38
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	18d1      	adds	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461a      	mov	r2, r3
 80019f0:	f003 fa76 	bl	8004ee0 <USB_HC_StartXfer>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 ff93 	bl	8004942 <USB_GetMode>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	f040 80ef 	bne.w	8001c02 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 ff77 	bl	800491c <USB_ReadInterrupts>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80e5 	beq.w	8001c00 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 ff6e 	bl	800491c <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4a:	d104      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 ff5e 	bl	800491c <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a6a:	d104      	bne.n	8001a76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f002 ff4e 	bl	800491c <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a8a:	d104      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 ff3e 	bl	800491c <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 ff30 	bl	800491c <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac6:	d115      	bne.n	8001af4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ad0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f005 fce8 	bl	80074b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f826 	bl	8004b40 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 ff0f 	bl	800491c <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b08:	d102      	bne.n	8001b10 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f001 f966 	bl	8002ddc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ff01 	bl	800491c <USB_ReadInterrupts>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d106      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f005 fcab 	bl	8007480 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fef0 	bl	800491c <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b46:	d138      	bne.n	8001bba <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fb0d 	bl	800516c <USB_HC_ReadInterrupt>
 8001b52:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e025      	b.n	8001ba6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	fa22 f303 	lsr.w	r3, r2, r3
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d018      	beq.n	8001ba0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	015a      	lsls	r2, r3, #5
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b84:	d106      	bne.n	8001b94 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8cf 	bl	8001d30 <HCD_HC_IN_IRQHandler>
 8001b92:	e005      	b.n	8001ba0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fcfd 	bl	800259a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d3d4      	bcc.n	8001b5a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 feac 	bl	800491c <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d101      	bne.n	8001bd2 <HAL_HCD_IRQHandler+0x1d2>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_HCD_IRQHandler+0x1d4>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d014      	beq.n	8001c02 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0210 	bic.w	r2, r2, #16
 8001be6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f001 f84b 	bl	8002c84 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699a      	ldr	r2, [r3, #24]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0210 	orr.w	r2, r2, #16
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	e000      	b.n	8001c02 <HAL_HCD_IRQHandler+0x202>
      return;
 8001c00:	bf00      	nop
    }
  }
}
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_HCD_Start+0x16>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e013      	b.n	8001c46 <HAL_HCD_Start+0x3e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fd83 	bl	8004736 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 ffe6 	bl	8004c08 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_HCD_Stop+0x16>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e00d      	b.n	8001c80 <HAL_HCD_Stop+0x32>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fbc7 	bl	8005404 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f002 ff8d 	bl	8004bb4 <USB_ResetPort>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	335c      	adds	r3, #92	; 0x5c
 8001cc0:	781b      	ldrb	r3, [r3, #0]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	334c      	adds	r3, #76	; 0x4c
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f002 ffcf 	bl	8004ca8 <USB_GetCurrentFrame>
 8001d0a:	4603      	mov	r3, r0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 ffaa 	bl	8004c7a <USB_GetHostSpeed>
 8001d26:	4603      	mov	r3, r0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d119      	bne.n	8001d94 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2304      	movs	r3, #4
 8001d70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	0151      	lsls	r1, r2, #5
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	440a      	add	r2, r1
 8001d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	60d3      	str	r3, [r2, #12]
 8001d92:	e0ce      	b.n	8001f32 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001daa:	d12c      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	461a      	mov	r2, r3
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	440b      	add	r3, r1
 8001dce:	335d      	adds	r3, #93	; 0x5d
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	0151      	lsls	r1, r2, #5
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	440a      	add	r2, r1
 8001dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f003 f9c5 	bl	800518e <USB_HC_Halt>
 8001e04:	e095      	b.n	8001f32 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d109      	bne.n	8001e30 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2320      	movs	r3, #32
 8001e2c:	6093      	str	r3, [r2, #8]
 8001e2e:	e080      	b.n	8001f32 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d134      	bne.n	8001eb0 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	0151      	lsls	r1, r2, #5
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	440a      	add	r2, r1
 8001e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	335d      	adds	r3, #93	; 0x5d
 8001e76:	2205      	movs	r2, #5
 8001e78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	461a      	mov	r2, r3
 8001e88:	2310      	movs	r3, #16
 8001e8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 f970 	bl	800518e <USB_HC_Halt>
 8001eae:	e040      	b.n	8001f32 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec6:	d134      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	0151      	lsls	r1, r2, #5
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	440a      	add	r2, r1
 8001ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ee2:	f043 0302 	orr.w	r3, r3, #2
 8001ee6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 f94b 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2310      	movs	r3, #16
 8001f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335d      	adds	r3, #93	; 0x5d
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f30:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f48:	d122      	bne.n	8001f90 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	0151      	lsls	r1, r2, #5
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	440a      	add	r2, r1
 8001f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f64:	f043 0302 	orr.w	r3, r3, #2
 8001f68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 f90a 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f8e:	e300      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	f040 80fd 	bne.w	80021a2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3348      	adds	r3, #72	; 0x48
 8001fc0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0159      	lsls	r1, r3, #5
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001fd4:	1ad1      	subs	r1, r2, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4403      	add	r3, r0
 8001fe4:	334c      	adds	r3, #76	; 0x4c
 8001fe6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	335d      	adds	r3, #93	; 0x5d
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3358      	adds	r3, #88	; 0x58
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2301      	movs	r3, #1
 8002020:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	333f      	adds	r3, #63	; 0x3f
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	333f      	adds	r3, #63	; 0x3f
 8002048:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800204a:	2b02      	cmp	r3, #2
 800204c:	d121      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	0151      	lsls	r1, r2, #5
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	440a      	add	r2, r1
 8002064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	4611      	mov	r1, r2
 8002078:	4618      	mov	r0, r3
 800207a:	f003 f888 	bl	800518e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2310      	movs	r3, #16
 800208e:	6093      	str	r3, [r2, #8]
 8002090:	e070      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	333f      	adds	r3, #63	; 0x3f
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d12a      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	0151      	lsls	r1, r2, #5
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	440a      	add	r2, r1
 80020be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020c6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	335c      	adds	r3, #92	; 0x5c
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b2d8      	uxtb	r0, r3
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	335c      	adds	r3, #92	; 0x5c
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4601      	mov	r1, r0
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f005 f9ec 	bl	80074d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80020fc:	e03a      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	333f      	adds	r3, #63	; 0x3f
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d12f      	bne.n	8002174 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	335c      	adds	r3, #92	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	3350      	adds	r3, #80	; 0x50
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2d8      	uxtb	r0, r3
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3350      	adds	r3, #80	; 0x50
 8002150:	4602      	mov	r2, r0
 8002152:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	b2d8      	uxtb	r0, r3
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	335c      	adds	r3, #92	; 0x5c
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	4601      	mov	r1, r0
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f005 f9b0 	bl	80074d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3350      	adds	r3, #80	; 0x50
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	3350      	adds	r3, #80	; 0x50
 800219c:	4602      	mov	r2, r0
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	e1f7      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	f040 811a 	bne.w	80023ee <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	0151      	lsls	r1, r2, #5
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	440a      	add	r2, r1
 80021d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d4:	f023 0302 	bic.w	r3, r3, #2
 80021d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	335d      	adds	r3, #93	; 0x5d
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10a      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	335c      	adds	r3, #92	; 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e0d9      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	335d      	adds	r3, #93	; 0x5d
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10a      	bne.n	8002232 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	335c      	adds	r3, #92	; 0x5c
 800222c:	2205      	movs	r2, #5
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e0c3      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	335d      	adds	r3, #93	; 0x5d
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d00a      	beq.n	800225e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	335d      	adds	r3, #93	; 0x5d
 8002258:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800225a:	2b08      	cmp	r3, #8
 800225c:	d156      	bne.n	800230c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3358      	adds	r3, #88	; 0x58
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4403      	add	r3, r0
 8002280:	3358      	adds	r3, #88	; 0x58
 8002282:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3358      	adds	r3, #88	; 0x58
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d914      	bls.n	80022c4 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	3358      	adds	r3, #88	; 0x58
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	335c      	adds	r3, #92	; 0x5c
 80022be:	2204      	movs	r2, #4
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e009      	b.n	80022d8 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	335c      	adds	r3, #92	; 0x5c
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e056      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	335d      	adds	r3, #93	; 0x5d
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d123      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	335c      	adds	r3, #92	; 0x5c
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800234c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002354:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e027      	b.n	80023ba <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	335d      	adds	r3, #93	; 0x5d
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b07      	cmp	r3, #7
 800237e:	d11c      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3358      	adds	r3, #88	; 0x58
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4403      	add	r3, r0
 80023a2:	3358      	adds	r3, #88	; 0x58
 80023a4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	335c      	adds	r3, #92	; 0x5c
 80023b6:	2204      	movs	r2, #4
 80023b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	461a      	mov	r2, r3
 80023c8:	2302      	movs	r3, #2
 80023ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	335c      	adds	r3, #92	; 0x5c
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	4601      	mov	r1, r0
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f005 f874 	bl	80074d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023ec:	e0d1      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002400:	2b80      	cmp	r3, #128	; 0x80
 8002402:	d13e      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	440a      	add	r2, r1
 800241a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	3358      	adds	r3, #88	; 0x58
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4403      	add	r3, r0
 8002446:	3358      	adds	r3, #88	; 0x58
 8002448:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	440b      	add	r3, r1
 8002458:	335d      	adds	r3, #93	; 0x5d
 800245a:	2206      	movs	r2, #6
 800245c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f002 fe90 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	6093      	str	r3, [r2, #8]
}
 8002480:	e087      	b.n	8002592 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d17c      	bne.n	8002592 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	333f      	adds	r3, #63	; 0x3f
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d122      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	3358      	adds	r3, #88	; 0x58
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fe4e 	bl	800518e <USB_HC_Halt>
 80024f2:	e045      	b.n	8002580 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	333f      	adds	r3, #63	; 0x3f
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	333f      	adds	r3, #63	; 0x3f
 800251a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800251c:	2b02      	cmp	r3, #2
 800251e:	d12f      	bne.n	8002580 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3358      	adds	r3, #88	; 0x58
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d121      	bne.n	8002580 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	440b      	add	r3, r1
 800254a:	335d      	adds	r3, #93	; 0x5d
 800254c:	2203      	movs	r2, #3
 800254e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fe07 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	2310      	movs	r3, #16
 8002590:	6093      	str	r3, [r2, #8]
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d119      	bne.n	80025fe <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2304      	movs	r3, #4
 80025da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	0151      	lsls	r1, r2, #5
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	440a      	add	r2, r1
 80025f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025fc:	e33e      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b20      	cmp	r3, #32
 8002612:	d141      	bne.n	8002698 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	2320      	movs	r3, #32
 8002624:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	440b      	add	r3, r1
 8002634:	333d      	adds	r3, #61	; 0x3d
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	f040 831f 	bne.w	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	333d      	adds	r3, #61	; 0x3d
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	440b      	add	r3, r1
 8002660:	335c      	adds	r3, #92	; 0x5c
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	0151      	lsls	r1, r2, #5
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	440a      	add	r2, r1
 800267c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f002 fd7c 	bl	800518e <USB_HC_Halt>
}
 8002696:	e2f1      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d13f      	bne.n	800272e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	440b      	add	r3, r1
 80026bc:	335d      	adds	r3, #93	; 0x5d
 80026be:	2204      	movs	r2, #4
 80026c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	333d      	adds	r3, #61	; 0x3d
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3358      	adds	r3, #88	; 0x58
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	0151      	lsls	r1, r2, #5
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	440a      	add	r2, r1
 8002700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fd3a 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	461a      	mov	r2, r3
 8002728:	2340      	movs	r3, #64	; 0x40
 800272a:	6093      	str	r3, [r2, #8]
}
 800272c:	e2a6      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002744:	d122      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	440a      	add	r2, r1
 800275c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fd0c 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002788:	6093      	str	r3, [r2, #8]
}
 800278a:	e277      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d135      	bne.n	800280e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	3358      	adds	r3, #88	; 0x58
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	0151      	lsls	r1, r2, #5
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	440a      	add	r2, r1
 80027cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 fcd4 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	335d      	adds	r3, #93	; 0x5d
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
}
 800280c:	e236      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d12b      	bne.n	800287c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2308      	movs	r3, #8
 8002834:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	0151      	lsls	r1, r2, #5
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	440a      	add	r2, r1
 800284c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fc94 	bl	800518e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	335d      	adds	r3, #93	; 0x5d
 8002876:	2205      	movs	r2, #5
 8002878:	701a      	strb	r2, [r3, #0]
}
 800287a:	e1ff      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b10      	cmp	r3, #16
 8002890:	d155      	bne.n	800293e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	440b      	add	r3, r1
 80028a0:	3358      	adds	r3, #88	; 0x58
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	335d      	adds	r3, #93	; 0x5d
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	333d      	adds	r3, #61	; 0x3d
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d114      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	333c      	adds	r3, #60	; 0x3c
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	333d      	adds	r3, #61	; 0x3d
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	0151      	lsls	r1, r2, #5
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	440a      	add	r2, r1
 8002910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f002 fc32 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	015a      	lsls	r2, r3, #5
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4413      	add	r3, r2
 8002932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002936:	461a      	mov	r2, r3
 8002938:	2310      	movs	r3, #16
 800293a:	6093      	str	r3, [r2, #8]
}
 800293c:	e19e      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	015a      	lsls	r2, r3, #5
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4413      	add	r3, r2
 8002946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002950:	2b80      	cmp	r3, #128	; 0x80
 8002952:	d12b      	bne.n	80029ac <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f002 fc05 	bl	800518e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335d      	adds	r3, #93	; 0x5d
 8002994:	2206      	movs	r2, #6
 8002996:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	461a      	mov	r2, r3
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	6093      	str	r3, [r2, #8]
}
 80029aa:	e167      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c2:	d135      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fbcd 	bl	800518e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	2310      	movs	r3, #16
 8002a04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	461a      	mov	r2, r3
 8002a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335d      	adds	r3, #93	; 0x5d
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	701a      	strb	r2, [r3, #0]
}
 8002a2e:	e125      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	f040 811a 	bne.w	8002c7c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a62:	f023 0302 	bic.w	r3, r3, #2
 8002a66:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	440b      	add	r3, r1
 8002a76:	335d      	adds	r3, #93	; 0x5d
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d137      	bne.n	8002aee <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335c      	adds	r3, #92	; 0x5c
 8002a8e:	2201      	movs	r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	333f      	adds	r3, #63	; 0x3f
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d00b      	beq.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333f      	adds	r3, #63	; 0x3f
 8002ab8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	f040 80c5 	bne.w	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3351      	adds	r3, #81	; 0x51
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2d8      	uxtb	r0, r3
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3351      	adds	r3, #81	; 0x51
 8002ae8:	4602      	mov	r2, r0
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e0ad      	b.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335d      	adds	r3, #93	; 0x5d
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d10a      	bne.n	8002b1a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	335c      	adds	r3, #92	; 0x5c
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
 8002b18:	e097      	b.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	335d      	adds	r3, #93	; 0x5d
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d10a      	bne.n	8002b46 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	2202      	movs	r2, #2
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e081      	b.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	335d      	adds	r3, #93	; 0x5d
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d10a      	bne.n	8002b72 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e06b      	b.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	335d      	adds	r3, #93	; 0x5d
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b06      	cmp	r3, #6
 8002b86:	d00a      	beq.n	8002b9e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	335d      	adds	r3, #93	; 0x5d
 8002b98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d155      	bne.n	8002c4a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	3358      	adds	r3, #88	; 0x58
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c59      	adds	r1, r3, #1
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4403      	add	r3, r0
 8002bc0:	3358      	adds	r3, #88	; 0x58
 8002bc2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3358      	adds	r3, #88	; 0x58
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d914      	bls.n	8002c04 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3358      	adds	r3, #88	; 0x58
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	335c      	adds	r3, #92	; 0x5c
 8002bfe:	2204      	movs	r2, #4
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e009      	b.n	8002c18 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c2e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2302      	movs	r3, #2
 8002c5a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b2d8      	uxtb	r0, r3
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	335c      	adds	r3, #92	; 0x5c
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4601      	mov	r1, r0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f004 fc2c 	bl	80074d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	; 0x28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	0c5b      	lsrs	r3, r3, #17
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d003      	beq.n	8002cc8 <HCD_RXQLVL_IRQHandler+0x44>
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	f000 8082 	beq.w	8002dca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002cc6:	e083      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d07f      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x14a>
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	; 0x44
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d074      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3344      	adds	r3, #68	; 0x44
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f001 fde3 	bl	80048ca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3344      	adds	r3, #68	; 0x44
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	18d1      	adds	r1, r2, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4403      	add	r3, r0
 8002d28:	3344      	adds	r3, #68	; 0x44
 8002d2a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	334c      	adds	r3, #76	; 0x4c
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	18d1      	adds	r1, r2, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4403      	add	r3, r0
 8002d50:	334c      	adds	r3, #76	; 0x4c
 8002d52:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d031      	beq.n	8002dce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d80:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d88:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3350      	adds	r3, #80	; 0x50
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3350      	adds	r3, #80	; 0x50
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e001      	b.n	8002dce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002dce:	bf00      	nop
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	1ff80000 	.word	0x1ff80000

08002ddc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d10b      	bne.n	8002e2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f004 fb3c 	bl	800749c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d132      	bne.n	8002e9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d126      	bne.n	8002e96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d113      	bne.n	8002e78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e5a:	d106      	bne.n	8002e6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2102      	movs	r1, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fe6c 	bl	8004b40 <USB_InitFSLSPClkSel>
 8002e68:	e011      	b.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fe65 	bl	8004b40 <USB_InitFSLSPClkSel>
 8002e76:	e00a      	b.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e86:	461a      	mov	r2, r3
 8002e88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f004 fb2e 	bl	80074f0 <HAL_HCD_PortEnabled_Callback>
 8002e94:	e002      	b.n	8002e9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f004 fb38 	bl	800750c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d103      	bne.n	8002eae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6013      	str	r3, [r2, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e11f      	b.n	8003116 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd fbfc 	bl	80006e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2224      	movs	r2, #36	; 0x24
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f28:	f001 f9de 	bl	80042e8 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4a7b      	ldr	r2, [pc, #492]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d807      	bhi.n	8002f48 <HAL_I2C_Init+0x84>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_I2C_Init+0x260>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e006      	b.n	8002f56 <HAL_I2C_Init+0x92>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4a77      	ldr	r2, [pc, #476]	; (8003128 <HAL_I2C_Init+0x264>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	bf94      	ite	ls
 8002f50:	2301      	movls	r3, #1
 8002f52:	2300      	movhi	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0db      	b.n	8003116 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4a72      	ldr	r2, [pc, #456]	; (800312c <HAL_I2C_Init+0x268>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	0c9b      	lsrs	r3, r3, #18
 8002f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a64      	ldr	r2, [pc, #400]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d802      	bhi.n	8002f98 <HAL_I2C_Init+0xd4>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e009      	b.n	8002fac <HAL_I2C_Init+0xe8>
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_I2C_Init+0x26c>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	3301      	adds	r3, #1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4956      	ldr	r1, [pc, #344]	; (8003120 <HAL_I2C_Init+0x25c>)
 8002fc8:	428b      	cmp	r3, r1
 8002fca:	d80d      	bhi.n	8002fe8 <HAL_I2C_Init+0x124>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e59      	subs	r1, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	bf38      	it	cc
 8002fe4:	2304      	movcc	r3, #4
 8002fe6:	e04f      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d111      	bne.n	8003014 <HAL_I2C_Init+0x150>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	e012      	b.n	800303a <HAL_I2C_Init+0x176>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Init+0x17e>
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10e      	bne.n	8003068 <HAL_I2C_Init+0x1a4>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1e58      	subs	r0, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	440b      	add	r3, r1
 8003058:	fbb0 f3f3 	udiv	r3, r0, r3
 800305c:	3301      	adds	r3, #1
 800305e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003066:	e00f      	b.n	8003088 <HAL_I2C_Init+0x1c4>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	6809      	ldr	r1, [r1, #0]
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6911      	ldr	r1, [r2, #16]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	000186a0 	.word	0x000186a0
 8003124:	001e847f 	.word	0x001e847f
 8003128:	003d08ff 	.word	0x003d08ff
 800312c:	431bde83 	.word	0x431bde83
 8003130:	10624dd3 	.word	0x10624dd3

08003134 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e128      	b.n	8003398 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a90      	ldr	r2, [pc, #576]	; (80033a0 <HAL_I2S_Init+0x26c>)
 800315e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd fb67 	bl	8000834 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800317c:	f023 030f 	bic.w	r3, r3, #15
 8003180:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2202      	movs	r2, #2
 8003188:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d060      	beq.n	8003254 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800319a:	2310      	movs	r3, #16
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e001      	b.n	80031a4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d802      	bhi.n	80031b2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031b2:	2001      	movs	r0, #1
 80031b4:	f001 f99c 	bl	80044f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80031b8:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c2:	d125      	bne.n	8003210 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	461a      	mov	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	3305      	adds	r3, #5
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e01f      	b.n	800322e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	461a      	mov	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	3305      	adds	r3, #5
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e00e      	b.n	800322e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	fbb2 f2f3 	udiv	r2, r2, r3
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	3305      	adds	r3, #5
 800322c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a5c      	ldr	r2, [pc, #368]	; (80033a4 <HAL_I2S_Init+0x270>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	08db      	lsrs	r3, r3, #3
 8003238:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	e003      	b.n	800325c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003254:	2302      	movs	r3, #2
 8003256:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d902      	bls.n	8003268 <HAL_I2S_Init+0x134>
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2bff      	cmp	r3, #255	; 0xff
 8003266:	d907      	bls.n	8003278 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f043 0210 	orr.w	r2, r3, #16
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e08f      	b.n	8003398 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	ea42 0103 	orr.w	r1, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	430a      	orrs	r2, r1
 800328a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003296:	f023 030f 	bic.w	r3, r3, #15
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6851      	ldr	r1, [r2, #4]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6992      	ldr	r2, [r2, #24]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ba:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d161      	bne.n	8003388 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a38      	ldr	r2, [pc, #224]	; (80033a8 <HAL_I2S_Init+0x274>)
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a37      	ldr	r2, [pc, #220]	; (80033ac <HAL_I2S_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_I2S_Init+0x1a4>
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_I2S_Init+0x27c>)
 80032d6:	e001      	b.n	80032dc <HAL_I2S_Init+0x1a8>
 80032d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	4932      	ldr	r1, [pc, #200]	; (80033ac <HAL_I2S_Init+0x278>)
 80032e4:	428a      	cmp	r2, r1
 80032e6:	d101      	bne.n	80032ec <HAL_I2S_Init+0x1b8>
 80032e8:	4a31      	ldr	r2, [pc, #196]	; (80033b0 <HAL_I2S_Init+0x27c>)
 80032ea:	e001      	b.n	80032f0 <HAL_I2S_Init+0x1bc>
 80032ec:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_I2S_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_I2S_Init+0x1d4>
 8003304:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_I2S_Init+0x27c>)
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x1d8>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330c:	2202      	movs	r2, #2
 800330e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a25      	ldr	r2, [pc, #148]	; (80033ac <HAL_I2S_Init+0x278>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_I2S_Init+0x1ea>
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_I2S_Init+0x27c>)
 800331c:	e001      	b.n	8003322 <HAL_I2S_Init+0x1ee>
 800331e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332e:	d003      	beq.n	8003338 <HAL_I2S_Init+0x204>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d103      	bne.n	8003340 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	e001      	b.n	8003344 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	b299      	uxth	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800335a:	4303      	orrs	r3, r0
 800335c:	b29b      	uxth	r3, r3
 800335e:	430b      	orrs	r3, r1
 8003360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003362:	4313      	orrs	r3, r2
 8003364:	b29a      	uxth	r2, r3
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	4313      	orrs	r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003370:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a0d      	ldr	r2, [pc, #52]	; (80033ac <HAL_I2S_Init+0x278>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d101      	bne.n	8003380 <HAL_I2S_Init+0x24c>
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_I2S_Init+0x27c>)
 800337e:	e001      	b.n	8003384 <HAL_I2S_Init+0x250>
 8003380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003384:	897a      	ldrh	r2, [r7, #10]
 8003386:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	080034ab 	.word	0x080034ab
 80033a4:	cccccccd 	.word	0xcccccccd
 80033a8:	080035c1 	.word	0x080035c1
 80033ac:	40003800 	.word	0x40003800
 80033b0:	40003400 	.word	0x40003400

080033b4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003434:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffb8 	bl	80033b4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	b292      	uxth	r2, r2
 8003460:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003492:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff93 	bl	80033c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d13a      	bne.n	800353c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d109      	bne.n	80034e4 <I2S_IRQHandler+0x3a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d102      	bne.n	80034e4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff ffb4 	bl	800344c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	d126      	bne.n	800353c <I2S_IRQHandler+0x92>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d11f      	bne.n	800353c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0202 	orr.w	r2, r3, #2
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff50 	bl	80033dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b03      	cmp	r3, #3
 8003546:	d136      	bne.n	80035b6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b02      	cmp	r3, #2
 8003550:	d109      	bne.n	8003566 <I2S_IRQHandler+0xbc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d102      	bne.n	8003566 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff45 	bl	80033f0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b08      	cmp	r3, #8
 800356e:	d122      	bne.n	80035b6 <I2S_IRQHandler+0x10c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b20      	cmp	r3, #32
 800357c:	d11b      	bne.n	80035b6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800358c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff ff13 	bl	80033dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4aa2      	ldr	r2, [pc, #648]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d101      	bne.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035da:	4ba2      	ldr	r3, [pc, #648]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035dc:	e001      	b.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a9b      	ldr	r2, [pc, #620]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d101      	bne.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035f8:	4b9a      	ldr	r3, [pc, #616]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035fa:	e001      	b.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360c:	d004      	beq.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f040 8099 	bne.w	800374a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f925 	bl	800387c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b01      	cmp	r3, #1
 800363a:	d107      	bne.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9c8 	bl	80039dc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d13a      	bne.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d035      	beq.n	80036cc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7e      	ldr	r2, [pc, #504]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800366a:	4b7e      	ldr	r3, [pc, #504]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800366c:	e001      	b.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4979      	ldr	r1, [pc, #484]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367a:	428b      	cmp	r3, r1
 800367c:	d101      	bne.n	8003682 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800367e:	4b79      	ldr	r3, [pc, #484]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003680:	e001      	b.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fe88 	bl	80033dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	f040 80be 	bne.w	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b8 	beq.w	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a59      	ldr	r2, [pc, #356]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036fe:	4b59      	ldr	r3, [pc, #356]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003700:	e001      	b.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003702:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4954      	ldr	r1, [pc, #336]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800370e:	428b      	cmp	r3, r1
 8003710:	d101      	bne.n	8003716 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003712:	4b54      	ldr	r3, [pc, #336]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003714:	e001      	b.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800371e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003720:	2300      	movs	r3, #0
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fe4a 	bl	80033dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003748:	e084      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f8be 	bl	80038e0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d002      	beq.n	800377e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8fd 	bl	8003978 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d12f      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02a      	beq.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2e      	ldr	r2, [pc, #184]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037ac:	4b2d      	ldr	r3, [pc, #180]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ae:	e001      	b.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4929      	ldr	r1, [pc, #164]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037c0:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037cc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fdfa 	bl	80033dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d131      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02c      	beq.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003808:	e001      	b.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4912      	ldr	r1, [pc, #72]	; (8003860 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003816:	428b      	cmp	r3, r1
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800381a:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003826:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003836:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	f043 0204 	orr.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fdc5 	bl	80033dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003852:	e000      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003854:	bf00      	nop
}
 8003856:	bf00      	nop
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40003800 	.word	0x40003800
 8003864:	40003400 	.word	0x40003400

08003868 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	1c99      	adds	r1, r3, #2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6251      	str	r1, [r2, #36]	; 0x24
 800388e:	881a      	ldrh	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ffc9 	bl	8003868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c99      	adds	r1, r3, #2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6251      	str	r1, [r2, #36]	; 0x24
 80038f2:	8819      	ldrh	r1, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <I2SEx_TxISR_I2SExt+0x90>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <I2SEx_TxISR_I2SExt+0x22>
 80038fe:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <I2SEx_TxISR_I2SExt+0x94>)
 8003900:	e001      	b.n	8003906 <I2SEx_TxISR_I2SExt+0x26>
 8003902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003906:	460a      	mov	r2, r1
 8003908:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d121      	bne.n	8003966 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <I2SEx_TxISR_I2SExt+0x90>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <I2SEx_TxISR_I2SExt+0x50>
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <I2SEx_TxISR_I2SExt+0x94>)
 800392e:	e001      	b.n	8003934 <I2SEx_TxISR_I2SExt+0x54>
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <I2SEx_TxISR_I2SExt+0x90>)
 800393c:	428b      	cmp	r3, r1
 800393e:	d101      	bne.n	8003944 <I2SEx_TxISR_I2SExt+0x64>
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <I2SEx_TxISR_I2SExt+0x94>)
 8003942:	e001      	b.n	8003948 <I2SEx_TxISR_I2SExt+0x68>
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff81 	bl	8003868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40003800 	.word	0x40003800
 8003974:	40003400 	.word	0x40003400

08003978 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68d8      	ldr	r0, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	1c99      	adds	r1, r3, #2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003990:	b282      	uxth	r2, r0
 8003992:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d113      	bne.n	80039d4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ba:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ff4a 	bl	8003868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a20      	ldr	r2, [pc, #128]	; (8003a6c <I2SEx_RxISR_I2SExt+0x90>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <I2SEx_RxISR_I2SExt+0x16>
 80039ee:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <I2SEx_RxISR_I2SExt+0x94>)
 80039f0:	e001      	b.n	80039f6 <I2SEx_RxISR_I2SExt+0x1a>
 80039f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f6:	68d8      	ldr	r0, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	1c99      	adds	r1, r3, #2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a02:	b282      	uxth	r2, r0
 8003a04:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d121      	bne.n	8003a62 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <I2SEx_RxISR_I2SExt+0x90>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d101      	bne.n	8003a2c <I2SEx_RxISR_I2SExt+0x50>
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <I2SEx_RxISR_I2SExt+0x94>)
 8003a2a:	e001      	b.n	8003a30 <I2SEx_RxISR_I2SExt+0x54>
 8003a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <I2SEx_RxISR_I2SExt+0x90>)
 8003a38:	428b      	cmp	r3, r1
 8003a3a:	d101      	bne.n	8003a40 <I2SEx_RxISR_I2SExt+0x64>
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <I2SEx_RxISR_I2SExt+0x94>)
 8003a3e:	e001      	b.n	8003a44 <I2SEx_RxISR_I2SExt+0x68>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a48:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff03 	bl	8003868 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40003800 	.word	0x40003800
 8003a70:	40003400 	.word	0x40003400

08003a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e25b      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d075      	beq.n	8003b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a92:	4ba3      	ldr	r3, [pc, #652]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4ba0      	ldr	r3, [pc, #640]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d112      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4b9d      	ldr	r3, [pc, #628]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab6:	d10b      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	4b99      	ldr	r3, [pc, #612]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05b      	beq.n	8003b7c <HAL_RCC_OscConfig+0x108>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d157      	bne.n	8003b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e236      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d106      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x74>
 8003ada:	4b91      	ldr	r3, [pc, #580]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a90      	ldr	r2, [pc, #576]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	e01d      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0x98>
 8003af2:	4b8b      	ldr	r3, [pc, #556]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a8a      	ldr	r2, [pc, #552]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b88      	ldr	r3, [pc, #544]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a87      	ldr	r2, [pc, #540]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a83      	ldr	r2, [pc, #524]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b81      	ldr	r3, [pc, #516]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a80      	ldr	r2, [pc, #512]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fd f9e2 	bl	8000ef4 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd f9de 	bl	8000ef4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1fb      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b76      	ldr	r3, [pc, #472]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xc0>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd f9ce 	bl	8000ef4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd f9ca 	bl	8000ef4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1e7      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6e:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0xe8>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d063      	beq.n	8003c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8a:	4b65      	ldr	r3, [pc, #404]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b62      	ldr	r3, [pc, #392]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d11c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b5f      	ldr	r3, [pc, #380]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d116      	bne.n	8003bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	4b5c      	ldr	r3, [pc, #368]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1bb      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4952      	ldr	r1, [pc, #328]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bda:	e03a      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be4:	4b4f      	ldr	r3, [pc, #316]	; (8003d24 <HAL_RCC_OscConfig+0x2b0>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bea:	f7fd f983 	bl	8000ef4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf2:	f7fd f97f 	bl	8000ef4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e19c      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c04:	4b46      	ldr	r3, [pc, #280]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4940      	ldr	r1, [pc, #256]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e015      	b.n	8003c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_RCC_OscConfig+0x2b0>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fd f962 	bl	8000ef4 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fd f95e 	bl	8000ef4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e17b      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d030      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c66:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <HAL_RCC_OscConfig+0x2b4>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd f942 	bl	8000ef4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c74:	f7fd f93e 	bl	8000ef4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e15b      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c86:	4b26      	ldr	r3, [pc, #152]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x200>
 8003c92:	e015      	b.n	8003cc0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_OscConfig+0x2b4>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd f92b 	bl	8000ef4 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca2:	f7fd f927 	bl	8000ef4 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e144      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a0 	beq.w	8003e0e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x2b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d121      	bne.n	8003d4e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_RCC_OscConfig+0x2b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_RCC_OscConfig+0x2b8>)
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fd f8ed 	bl	8000ef4 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	e011      	b.n	8003d42 <HAL_RCC_OscConfig+0x2ce>
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470000 	.word	0x42470000
 8003d28:	42470e80 	.word	0x42470e80
 8003d2c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fd f8e0 	bl	8000ef4 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0fd      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d42:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <HAL_RCC_OscConfig+0x4d4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x2f0>
 8003d56:	4b7d      	ldr	r3, [pc, #500]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	4a7c      	ldr	r2, [pc, #496]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
 8003d62:	e01c      	b.n	8003d9e <HAL_RCC_OscConfig+0x32a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b05      	cmp	r3, #5
 8003d6a:	d10c      	bne.n	8003d86 <HAL_RCC_OscConfig+0x312>
 8003d6c:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a76      	ldr	r2, [pc, #472]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	4b74      	ldr	r3, [pc, #464]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a73      	ldr	r2, [pc, #460]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	e00b      	b.n	8003d9e <HAL_RCC_OscConfig+0x32a>
 8003d86:	4b71      	ldr	r3, [pc, #452]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a70      	ldr	r2, [pc, #448]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
 8003d92:	4b6e      	ldr	r3, [pc, #440]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a6d      	ldr	r2, [pc, #436]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	f023 0304 	bic.w	r3, r3, #4
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d015      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da6:	f7fd f8a5 	bl	8000ef4 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd f8a1 	bl	8000ef4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e0bc      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc4:	4b61      	ldr	r3, [pc, #388]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ee      	beq.n	8003dae <HAL_RCC_OscConfig+0x33a>
 8003dd0:	e014      	b.n	8003dfc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fd f88f 	bl	8000ef4 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fd f88b 	bl	8000ef4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e0a6      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df0:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ee      	bne.n	8003dda <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dfc:	7dfb      	ldrb	r3, [r7, #23]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d105      	bne.n	8003e0e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e02:	4b52      	ldr	r3, [pc, #328]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a51      	ldr	r2, [pc, #324]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8092 	beq.w	8003f3c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e18:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d05c      	beq.n	8003ede <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d141      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2c:	4b48      	ldr	r3, [pc, #288]	; (8003f50 <HAL_RCC_OscConfig+0x4dc>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fd f85f 	bl	8000ef4 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fd f85b 	bl	8000ef4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e078      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4c:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	019b      	lsls	r3, r3, #6
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	3b01      	subs	r3, #1
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	4933      	ldr	r1, [pc, #204]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <HAL_RCC_OscConfig+0x4dc>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd f834 	bl	8000ef4 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd f830 	bl	8000ef4 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04d      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x41c>
 8003eae:	e045      	b.n	8003f3c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x4dc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd f81d 	bl	8000ef4 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fd f819 	bl	8000ef4 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e036      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x44a>
 8003edc:	e02e      	b.n	8003f3c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e029      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eea:	4b18      	ldr	r3, [pc, #96]	; (8003f4c <HAL_RCC_OscConfig+0x4d8>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d115      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f12:	4013      	ands	r3, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10d      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470060 	.word	0x42470060

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0cc      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90c      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b8      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494d      	ldr	r1, [pc, #308]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d044      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	2b03      	cmp	r3, #3
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e067      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4934      	ldr	r1, [pc, #208]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fc ff56 	bl	8000ef4 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fc ff52 	bl	8000ef4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e04f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20c      	bcs.n	800409c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b22      	ldr	r3, [pc, #136]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e032      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4916      	ldr	r1, [pc, #88]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490e      	ldr	r1, [pc, #56]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f821 	bl	8004120 <HAL_RCC_GetSysClockFreq>
 80040de:	4601      	mov	r1, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	5cd3      	ldrb	r3, [r2, r3]
 80040ee:	fa21 f303 	lsr.w	r3, r1, r3
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fc feb6 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00
 8004110:	40023800 	.word	0x40023800
 8004114:	08007b24 	.word	0x08007b24
 8004118:	20000000 	.word	0x20000000
 800411c:	20000004 	.word	0x20000004

08004120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004136:	4b63      	ldr	r3, [pc, #396]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d007      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x32>
 8004142:	2b08      	cmp	r3, #8
 8004144:	d008      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x38>
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 80b4 	bne.w	80042b4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b5e      	ldr	r3, [pc, #376]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800414e:	60bb      	str	r3, [r7, #8]
       break;
 8004150:	e0b3      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004152:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004154:	60bb      	str	r3, [r7, #8]
      break;
 8004156:	e0b0      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004158:	4b5a      	ldr	r3, [pc, #360]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004162:	4b58      	ldr	r3, [pc, #352]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04a      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416e:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	099b      	lsrs	r3, r3, #6
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	ea03 0501 	and.w	r5, r3, r1
 8004184:	ea04 0602 	and.w	r6, r4, r2
 8004188:	4629      	mov	r1, r5
 800418a:	4632      	mov	r2, r6
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f04f 0400 	mov.w	r4, #0
 8004194:	0154      	lsls	r4, r2, #5
 8004196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800419a:	014b      	lsls	r3, r1, #5
 800419c:	4619      	mov	r1, r3
 800419e:	4622      	mov	r2, r4
 80041a0:	1b49      	subs	r1, r1, r5
 80041a2:	eb62 0206 	sbc.w	r2, r2, r6
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	f04f 0400 	mov.w	r4, #0
 80041ae:	0194      	lsls	r4, r2, #6
 80041b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041b4:	018b      	lsls	r3, r1, #6
 80041b6:	1a5b      	subs	r3, r3, r1
 80041b8:	eb64 0402 	sbc.w	r4, r4, r2
 80041bc:	f04f 0100 	mov.w	r1, #0
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	00e2      	lsls	r2, r4, #3
 80041c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80041ca:	00d9      	lsls	r1, r3, #3
 80041cc:	460b      	mov	r3, r1
 80041ce:	4614      	mov	r4, r2
 80041d0:	195b      	adds	r3, r3, r5
 80041d2:	eb44 0406 	adc.w	r4, r4, r6
 80041d6:	f04f 0100 	mov.w	r1, #0
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	0262      	lsls	r2, r4, #9
 80041e0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80041e4:	0259      	lsls	r1, r3, #9
 80041e6:	460b      	mov	r3, r1
 80041e8:	4614      	mov	r4, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	4621      	mov	r1, r4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f04f 0400 	mov.w	r4, #0
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	f7fb ffee 	bl	80001d8 <__aeabi_uldivmod>
 80041fc:	4603      	mov	r3, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e049      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004204:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	f04f 0400 	mov.w	r4, #0
 800420e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	ea03 0501 	and.w	r5, r3, r1
 800421a:	ea04 0602 	and.w	r6, r4, r2
 800421e:	4629      	mov	r1, r5
 8004220:	4632      	mov	r2, r6
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	f04f 0400 	mov.w	r4, #0
 800422a:	0154      	lsls	r4, r2, #5
 800422c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004230:	014b      	lsls	r3, r1, #5
 8004232:	4619      	mov	r1, r3
 8004234:	4622      	mov	r2, r4
 8004236:	1b49      	subs	r1, r1, r5
 8004238:	eb62 0206 	sbc.w	r2, r2, r6
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	f04f 0400 	mov.w	r4, #0
 8004244:	0194      	lsls	r4, r2, #6
 8004246:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800424a:	018b      	lsls	r3, r1, #6
 800424c:	1a5b      	subs	r3, r3, r1
 800424e:	eb64 0402 	sbc.w	r4, r4, r2
 8004252:	f04f 0100 	mov.w	r1, #0
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	00e2      	lsls	r2, r4, #3
 800425c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004260:	00d9      	lsls	r1, r3, #3
 8004262:	460b      	mov	r3, r1
 8004264:	4614      	mov	r4, r2
 8004266:	195b      	adds	r3, r3, r5
 8004268:	eb44 0406 	adc.w	r4, r4, r6
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	02a2      	lsls	r2, r4, #10
 8004276:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800427a:	0299      	lsls	r1, r3, #10
 800427c:	460b      	mov	r3, r1
 800427e:	4614      	mov	r4, r2
 8004280:	4618      	mov	r0, r3
 8004282:	4621      	mov	r1, r4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f04f 0400 	mov.w	r4, #0
 800428a:	461a      	mov	r2, r3
 800428c:	4623      	mov	r3, r4
 800428e:	f7fb ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8004292:	4603      	mov	r3, r0
 8004294:	460c      	mov	r4, r1
 8004296:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	3301      	adds	r3, #1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	60bb      	str	r3, [r7, #8]
      break;
 80042b2:	e002      	b.n	80042ba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042b6:	60bb      	str	r3, [r7, #8]
      break;
 80042b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ba:	68bb      	ldr	r3, [r7, #8]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	00f42400 	.word	0x00f42400
 80042cc:	007a1200 	.word	0x007a1200

080042d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d4:	4b03      	ldr	r3, [pc, #12]	; (80042e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042d6:	681b      	ldr	r3, [r3, #0]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20000000 	.word	0x20000000

080042e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042ec:	f7ff fff0 	bl	80042d0 <HAL_RCC_GetHCLKFreq>
 80042f0:	4601      	mov	r1, r0
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	0a9b      	lsrs	r3, r3, #10
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	4a03      	ldr	r2, [pc, #12]	; (800430c <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fe:	5cd3      	ldrb	r3, [r2, r3]
 8004300:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004304:	4618      	mov	r0, r3
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	08007b34 	.word	0x08007b34

08004310 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004334:	2b00      	cmp	r3, #0
 8004336:	d038      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004338:	4b68      	ldr	r3, [pc, #416]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800433e:	f7fc fdd9 	bl	8000ef4 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004346:	f7fc fdd5 	bl	8000ef4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e0bd      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	071b      	lsls	r3, r3, #28
 8004376:	495a      	ldr	r1, [pc, #360]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800437e:	4b57      	ldr	r3, [pc, #348]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004384:	f7fc fdb6 	bl	8000ef4 <HAL_GetTick>
 8004388:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438c:	f7fc fdb2 	bl	8000ef4 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e09a      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8083 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	4b48      	ldr	r3, [pc, #288]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a47      	ldr	r2, [pc, #284]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
 80043c8:	4b45      	ldr	r3, [pc, #276]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043d4:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a42      	ldr	r2, [pc, #264]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fc fd88 	bl	8000ef4 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fc fd84 	bl	8000ef4 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e06c      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043fa:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02f      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	429a      	cmp	r2, r3
 8004422:	d028      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004424:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004440:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d114      	bne.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800444c:	f7fc fd52 	bl	8000ef4 <HAL_GetTick>
 8004450:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fc fd4e 	bl	8000ef4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e034      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4b1d      	ldr	r3, [pc, #116]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0ee      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004482:	d10d      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004484:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	4911      	ldr	r1, [pc, #68]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044aa:	6093      	str	r3, [r2, #8]
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	4909      	ldr	r1, [pc, #36]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d1a      	ldrb	r2, [r3, #20]
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80044d0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	42470068 	.word	0x42470068
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470e40 	.word	0x42470e40
 80044ec:	424711e0 	.word	0x424711e0

080044f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d13f      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800450e:	4b23      	ldr	r3, [pc, #140]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004516:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800451e:	2b01      	cmp	r3, #1
 8004520:	d131      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004522:	4b1f      	ldr	r3, [pc, #124]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004524:	617b      	str	r3, [r7, #20]
          break;
 8004526:	e031      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004534:	d109      	bne.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e008      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800454c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	099b      	lsrs	r3, r3, #6
 8004564:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004576:	0f1b      	lsrs	r3, r3, #28
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004582:	617b      	str	r3, [r7, #20]
          break;
 8004584:	e002      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
          break;
 800458a:	bf00      	nop
        }
      }
      break;
 800458c:	bf00      	nop
    }
  }
  return frequency;
 800458e:	697b      	ldr	r3, [r7, #20]
}
 8004590:	4618      	mov	r0, r3
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	40023800 	.word	0x40023800
 80045a0:	00bb8000 	.word	0x00bb8000
 80045a4:	007a1200 	.word	0x007a1200
 80045a8:	00f42400 	.word	0x00f42400

080045ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e056      	b.n	800466c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc fb0b 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	ea42 0103 	orr.w	r1, r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	0c1b      	lsrs	r3, r3, #16
 800463c:	f003 0104 	and.w	r1, r3, #4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69da      	ldr	r2, [r3, #28]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004674:	b084      	sub	sp, #16
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	f107 001c 	add.w	r0, r7, #28
 8004682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2b01      	cmp	r3, #1
 800468a:	d122      	bne.n	80046d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f94a 	bl	8004960 <USB_CoreReset>
 80046cc:	4603      	mov	r3, r0
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	e01a      	b.n	8004708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f93e 	bl	8004960 <USB_CoreReset>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
 80046fa:	e005      	b.n	8004708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10b      	bne.n	8004726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f043 0206 	orr.w	r2, r3, #6
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004732:	b004      	add	sp, #16
 8004734:	4770      	bx	lr

08004736 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f043 0201 	orr.w	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f023 0201 	bic.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d106      	bne.n	80047a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e00b      	b.n	80047be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e001      	b.n	80047be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e003      	b.n	80047c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047be:	2032      	movs	r0, #50	; 0x32
 80047c0:	f7fc fba4 	bl	8000f0c <HAL_Delay>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <USB_FlushTxFifo+0x48>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e006      	b.n	800480a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b20      	cmp	r3, #32
 8004806:	d0f0      	beq.n	80047ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	00030d40 	.word	0x00030d40

0800481c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2210      	movs	r2, #16
 800482c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <USB_FlushRxFifo+0x40>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d0f0      	beq.n	800482e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	00030d40 	.word	0x00030d40

08004860 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	4611      	mov	r1, r2
 800486c:	461a      	mov	r2, r3
 800486e:	460b      	mov	r3, r1
 8004870:	71fb      	strb	r3, [r7, #7]
 8004872:	4613      	mov	r3, r2
 8004874:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800487e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	d11a      	bne.n	80048bc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004886:	88bb      	ldrh	r3, [r7, #4]
 8004888:	3303      	adds	r3, #3
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e00f      	b.n	80048b4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	031a      	lsls	r2, r3, #12
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4413      	add	r3, r2
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	461a      	mov	r2, r3
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3304      	adds	r3, #4
 80048ac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d3eb      	bcc.n	8004894 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3724      	adds	r7, #36	; 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b089      	sub	sp, #36	; 0x24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80048e0:	88fb      	ldrh	r3, [r7, #6]
 80048e2:	3303      	adds	r3, #3
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e00b      	b.n	8004906 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	3304      	adds	r3, #4
 80048fe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	3301      	adds	r3, #1
 8004904:	61bb      	str	r3, [r7, #24]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3ef      	bcc.n	80048ee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800490e:	69fb      	ldr	r3, [r7, #28]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3724      	adds	r7, #36	; 0x24
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0301 	and.w	r3, r3, #1
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <USB_CoreReset+0x64>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e01b      	b.n	80049b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	daf2      	bge.n	800496c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a09      	ldr	r2, [pc, #36]	; (80049c4 <USB_CoreReset+0x64>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e006      	b.n	80049b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d0f0      	beq.n	8004996 <USB_CoreReset+0x36>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	00030d40 	.word	0x00030d40

080049c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049c8:	b084      	sub	sp, #16
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	f107 001c 	add.w	r0, r7, #28
 80049d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10a      	bne.n	8004a36 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a2e:	f043 0304 	orr.w	r3, r3, #4
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e014      	b.n	8004a60 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e009      	b.n	8004a60 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a5a:	f023 0304 	bic.w	r3, r3, #4
 8004a5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004a60:	2110      	movs	r1, #16
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff feb4 	bl	80047d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff fed7 	bl	800481c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e015      	b.n	8004aa0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3e5      	bcc.n	8004a74 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8ac 	bl	8004c08 <USB_DriveVbus>

  HAL_Delay(200U);
 8004ab0:	20c8      	movs	r0, #200	; 0xc8
 8004ab2:	f7fc fa2b 	bl	8000f0c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <USB_HostInit+0x164>)
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <USB_HostInit+0x168>)
 8004ae2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ae6:	e009      	b.n	8004afc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2280      	movs	r2, #128	; 0x80
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a10      	ldr	r2, [pc, #64]	; (8004b34 <USB_HostInit+0x16c>)
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <USB_HostInit+0x170>)
 8004af8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d105      	bne.n	8004b0e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	f043 0210 	orr.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <USB_HostInit+0x174>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b26:	b004      	add	sp, #16
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	01000200 	.word	0x01000200
 8004b30:	00e00300 	.word	0x00e00300
 8004b34:	00600080 	.word	0x00600080
 8004b38:	004000e0 	.word	0x004000e0
 8004b3c:	a3200008 	.word	0xa3200008

08004b40 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d107      	bne.n	8004b92 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b8e:	6053      	str	r3, [r2, #4]
 8004b90:	e009      	b.n	8004ba6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d106      	bne.n	8004ba6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ba4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004be4:	2064      	movs	r0, #100	; 0x64
 8004be6:	f7fc f991 	bl	8000f0c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004bf8:	200a      	movs	r0, #10
 8004bfa:	f7fc f987 	bl	8000f0c <HAL_Delay>

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	460b      	mov	r3, r1
 8004c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <USB_DriveVbus+0x44>
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d106      	bne.n	8004c4c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c4a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d109      	bne.n	8004c6c <USB_DriveVbus+0x64>
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c6a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b085      	sub	sp, #20
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	0c5b      	lsrs	r3, r3, #17
 8004c98:	f003 0303 	and.w	r3, r3, #3
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	b29b      	uxth	r3, r3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	70fb      	strb	r3, [r7, #3]
 8004cde:	460b      	mov	r3, r1
 8004ce0:	70bb      	strb	r3, [r7, #2]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8004d00:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d87e      	bhi.n	8004e08 <USB_HC_Init+0x13c>
 8004d0a:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <USB_HC_Init+0x44>)
 8004d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004dcb 	.word	0x08004dcb
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004d8d 	.word	0x08004d8d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d32:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da10      	bge.n	8004d5e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004d5c:	e057      	b.n	8004e0e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d051      	beq.n	8004e0e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d88:	60d3      	str	r3, [r2, #12]
      break;
 8004d8a:	e040      	b.n	8004e0e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004da0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da34      	bge.n	8004e12 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004dc8:	e023      	b.n	8004e12 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f240 2325 	movw	r3, #549	; 0x225
 8004ddc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004dde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	da17      	bge.n	8004e16 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e00:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e04:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e06:	e006      	b.n	8004e16 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	e004      	b.n	8004e18 <USB_HC_Init+0x14c>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <USB_HC_Init+0x14c>
      break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <USB_HC_Init+0x14c>
      break;
 8004e16:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e32:	4313      	orrs	r3, r2
 8004e34:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da03      	bge.n	8004e52 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	e001      	b.n	8004e56 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004e56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d103      	bne.n	8004e66 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e001      	b.n	8004e6a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e6a:	787b      	ldrb	r3, [r7, #1]
 8004e6c:	059b      	lsls	r3, r3, #22
 8004e6e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e72:	78bb      	ldrb	r3, [r7, #2]
 8004e74:	02db      	lsls	r3, r3, #11
 8004e76:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e80:	049b      	lsls	r3, r3, #18
 8004e82:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e8e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	0159      	lsls	r1, r3, #5
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ea6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d10f      	bne.n	8004ed0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ece:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d028      	beq.n	8004f5c <USB_HC_StartXfer+0x7c>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	791b      	ldrb	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d124      	bne.n	8004f5c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <USB_HC_StartXfer+0x50>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	795b      	ldrb	r3, [r3, #5]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	4619      	mov	r1, r3
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 fa30 	bl	800538c <USB_DoPing>
      return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e114      	b.n	800515a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d112      	bne.n	8004f5c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	6a3a      	ldr	r2, [r7, #32]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004f54:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d018      	beq.n	8004f96 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	8912      	ldrh	r2, [r2, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	8912      	ldrh	r2, [r2, #8]
 8004f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f78:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f7c:	8b7b      	ldrh	r3, [r7, #26]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90b      	bls.n	8004f9a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004f82:	8b7b      	ldrh	r3, [r7, #26]
 8004f84:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004f86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	8912      	ldrh	r2, [r2, #8]
 8004f8c:	fb02 f203 	mul.w	r2, r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	611a      	str	r2, [r3, #16]
 8004f94:	e001      	b.n	8004f9a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004f96:	2301      	movs	r3, #1
 8004f98:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	78db      	ldrb	r3, [r3, #3]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d006      	beq.n	8004fb0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	8912      	ldrh	r2, [r2, #8]
 8004fa8:	fb02 f203 	mul.w	r2, r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fba:	04d9      	lsls	r1, r3, #19
 8004fbc:	4b69      	ldr	r3, [pc, #420]	; (8005164 <USB_HC_StartXfer+0x284>)
 8004fbe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fc0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	7a9b      	ldrb	r3, [r3, #10]
 8004fc6:	075b      	lsls	r3, r3, #29
 8004fc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fcc:	69f9      	ldr	r1, [r7, #28]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	6a39      	ldr	r1, [r7, #32]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fd8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fda:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	68d9      	ldr	r1, [r3, #12]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	440a      	add	r2, r1
 8005024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800502c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	7e7b      	ldrb	r3, [r7, #25]
 800503e:	075b      	lsls	r3, r3, #29
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	0148      	lsls	r0, r1, #5
 8005044:	6a39      	ldr	r1, [r7, #32]
 8005046:	4401      	add	r1, r0
 8005048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800504c:	4313      	orrs	r3, r2
 800504e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a42      	ldr	r2, [pc, #264]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005060:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005062:	4b41      	ldr	r3, [pc, #260]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <USB_HC_StartXfer+0x288>)
 800506c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	78db      	ldrb	r3, [r3, #3]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005076:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	4a3a      	ldr	r2, [pc, #232]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e005      	b.n	8005090 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005084:	4b38      	ldr	r3, [pc, #224]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800508c:	4a36      	ldr	r2, [pc, #216]	; (8005168 <USB_HC_StartXfer+0x288>)
 800508e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <USB_HC_StartXfer+0x288>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005098:	4a33      	ldr	r2, [pc, #204]	; (8005168 <USB_HC_StartXfer+0x288>)
 800509a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a8:	461a      	mov	r2, r3
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <USB_HC_StartXfer+0x288>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e04f      	b.n	800515a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d14a      	bne.n	8005158 <USB_HC_StartXfer+0x278>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d046      	beq.n	8005158 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	79db      	ldrb	r3, [r3, #7]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d830      	bhi.n	8005134 <USB_HC_StartXfer+0x254>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <USB_HC_StartXfer+0x1f8>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	080050e9 	.word	0x080050e9
 80050e4:	0800510d 	.word	0x0800510d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	3303      	adds	r3, #3
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050f2:	8afa      	ldrh	r2, [r7, #22]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d91c      	bls.n	8005138 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f043 0220 	orr.w	r2, r3, #32
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	619a      	str	r2, [r3, #24]
        }
        break;
 800510a:	e015      	b.n	8005138 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	3303      	adds	r3, #3
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005116:	8afa      	ldrh	r2, [r7, #22]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	b29b      	uxth	r3, r3
 8005122:	429a      	cmp	r2, r3
 8005124:	d90a      	bls.n	800513c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	619a      	str	r2, [r3, #24]
        }
        break;
 8005132:	e003      	b.n	800513c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <USB_HC_StartXfer+0x25e>
        break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <USB_HC_StartXfer+0x25e>
        break;
 800513c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68d9      	ldr	r1, [r3, #12]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785a      	ldrb	r2, [r3, #1]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	b298      	uxth	r0, r3
 800514c:	2300      	movs	r3, #0
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4603      	mov	r3, r0
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7ff fb84 	bl	8004860 <USB_WritePacket>
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3728      	adds	r7, #40	; 0x28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	1ff80000 	.word	0x1ff80000
 8005168:	200000b0 	.word	0x200000b0

0800516c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	b29b      	uxth	r3, r3
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800518e:	b480      	push	{r7}
 8005190:	b087      	sub	sp, #28
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0c9b      	lsrs	r3, r3, #18
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <USB_HC_Halt+0x3a>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d16c      	bne.n	80052a2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	0151      	lsls	r1, r2, #5
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	440a      	add	r2, r1
 80051de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051e6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d143      	bne.n	800527c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005212:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	440a      	add	r2, r1
 800522a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800522e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005232:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	440a      	add	r2, r1
 800524a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800524e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005252:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	3301      	adds	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005260:	d81d      	bhi.n	800529e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005278:	d0ec      	beq.n	8005254 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800527a:	e080      	b.n	800537e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	440a      	add	r2, r1
 8005292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005296:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800529a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800529c:	e06f      	b.n	800537e <USB_HC_Halt+0x1f0>
          break;
 800529e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80052a0:	e06d      	b.n	800537e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d143      	bne.n	800535a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	0151      	lsls	r1, r2, #5
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	440a      	add	r2, r1
 80052e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005310:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	440a      	add	r2, r1
 8005328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800532c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005330:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533e:	d81d      	bhi.n	800537c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4413      	add	r3, r2
 8005348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005356:	d0ec      	beq.n	8005332 <USB_HC_Halt+0x1a4>
 8005358:	e011      	b.n	800537e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	440a      	add	r2, r1
 8005370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e000      	b.n	800537e <USB_HC_Halt+0x1f0>
          break;
 800537c:	bf00      	nop
    }
  }

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	04da      	lsls	r2, r3, #19
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <USB_DoPing+0x74>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	1ff80000 	.word	0x1ff80000

08005404 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff f99f 	bl	8004758 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800541a:	2110      	movs	r1, #16
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff f9d7 	bl	80047d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff f9fa 	bl	800481c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e01f      	b.n	800546e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005444:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800544c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005454:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	461a      	mov	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3301      	adds	r3, #1
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d9dc      	bls.n	800542e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	e034      	b.n	80054e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005490:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005498:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c0:	d80c      	bhi.n	80054dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054d8:	d0ec      	beq.n	80054b4 <USB_StopHost+0xb0>
 80054da:	e000      	b.n	80054de <USB_StopHost+0xda>
        break;
 80054dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	3301      	adds	r3, #1
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b0f      	cmp	r3, #15
 80054e8:	d9c7      	bls.n	800547a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f04f 32ff 	mov.w	r2, #4294967295
 80054fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff f918 	bl	8004736 <USB_EnableGlobalInt>

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af04      	add	r7, sp, #16
 8005516:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005518:	2301      	movs	r3, #1
 800551a:	2202      	movs	r2, #2
 800551c:	2102      	movs	r1, #2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fc68 	bl	8005df4 <USBH_FindInterface>
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	2bff      	cmp	r3, #255	; 0xff
 800552c:	d002      	beq.n	8005534 <USBH_CDC_InterfaceInit+0x24>
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d901      	bls.n	8005538 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005534:	2302      	movs	r3, #2
 8005536:	e13d      	b.n	80057b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fc3d 	bl	8005dbc <USBH_SelectInterface>
 8005542:	4603      	mov	r3, r0
 8005544:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005546:	7bbb      	ldrb	r3, [r7, #14]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800554c:	2302      	movs	r3, #2
 800554e:	e131      	b.n	80057b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005556:	2050      	movs	r0, #80	; 0x50
 8005558:	f002 fa04 	bl	8007964 <malloc>
 800555c:	4603      	mov	r3, r0
 800555e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005570:	2302      	movs	r3, #2
 8005572:	e11f      	b.n	80057b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005574:	2250      	movs	r2, #80	; 0x50
 8005576:	2100      	movs	r1, #0
 8005578:	68b8      	ldr	r0, [r7, #8]
 800557a:	f002 fa03 	bl	8007984 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	211a      	movs	r1, #26
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	b25b      	sxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	da15      	bge.n	80055c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	211a      	movs	r1, #26
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80055a6:	781a      	ldrb	r2, [r3, #0]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	211a      	movs	r1, #26
 80055b2:	fb01 f303 	mul.w	r3, r1, r3
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	4619      	mov	r1, r3
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 fe36 	bl	800723a <USBH_AllocPipe>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	7819      	ldrb	r1, [r3, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	7858      	ldrb	r0, [r3, #1]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	8952      	ldrh	r2, [r2, #10]
 80055ee:	9202      	str	r2, [sp, #8]
 80055f0:	2203      	movs	r2, #3
 80055f2:	9201      	str	r2, [sp, #4]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4623      	mov	r3, r4
 80055f8:	4602      	mov	r2, r0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 fdee 	bl	80071dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2200      	movs	r2, #0
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 f8fb 	bl	8007804 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800560e:	2300      	movs	r3, #0
 8005610:	2200      	movs	r2, #0
 8005612:	210a      	movs	r1, #10
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fbed 	bl	8005df4 <USBH_FindInterface>
 800561a:	4603      	mov	r3, r0
 800561c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2bff      	cmp	r3, #255	; 0xff
 8005622:	d002      	beq.n	800562a <USBH_CDC_InterfaceInit+0x11a>
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d901      	bls.n	800562e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800562a:	2302      	movs	r3, #2
 800562c:	e0c2      	b.n	80057b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	211a      	movs	r1, #26
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b25b      	sxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	da16      	bge.n	8005674 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	211a      	movs	r1, #26
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	4413      	add	r3, r2
 8005652:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	211a      	movs	r1, #26
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	835a      	strh	r2, [r3, #26]
 8005672:	e015      	b.n	80056a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	211a      	movs	r1, #26
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	211a      	movs	r1, #26
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	211a      	movs	r1, #26
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	b25b      	sxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da16      	bge.n	80056e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	211a      	movs	r1, #26
 80056be:	fb01 f303 	mul.w	r3, r1, r3
 80056c2:	4413      	add	r3, r2
 80056c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056c8:	781a      	ldrb	r2, [r3, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	211a      	movs	r1, #26
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	4413      	add	r3, r2
 80056da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	835a      	strh	r2, [r3, #26]
 80056e4:	e015      	b.n	8005712 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	211a      	movs	r1, #26
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056f6:	781a      	ldrb	r2, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	211a      	movs	r1, #26
 8005702:	fb01 f303 	mul.w	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	7b9b      	ldrb	r3, [r3, #14]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fd8e 	bl	800723a <USBH_AllocPipe>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	7bdb      	ldrb	r3, [r3, #15]
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fd84 	bl	800723a <USBH_AllocPipe>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7b59      	ldrb	r1, [r3, #13]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	7b98      	ldrb	r0, [r3, #14]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	8b12      	ldrh	r2, [r2, #24]
 8005752:	9202      	str	r2, [sp, #8]
 8005754:	2202      	movs	r2, #2
 8005756:	9201      	str	r2, [sp, #4]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	4623      	mov	r3, r4
 800575c:	4602      	mov	r2, r0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fd3c 	bl	80071dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	7b19      	ldrb	r1, [r3, #12]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	7bd8      	ldrb	r0, [r3, #15]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	8b52      	ldrh	r2, [r2, #26]
 800577c:	9202      	str	r2, [sp, #8]
 800577e:	2202      	movs	r2, #2
 8005780:	9201      	str	r2, [sp, #4]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4623      	mov	r3, r4
 8005786:	4602      	mov	r2, r0
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 fd27 	bl	80071dc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	7b5b      	ldrb	r3, [r3, #13]
 800579a:	2200      	movs	r2, #0
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f002 f830 	bl	8007804 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	7b1b      	ldrb	r3, [r3, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f002 f829 	bl	8007804 <USBH_LL_SetToggle>

  return USBH_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd90      	pop	{r4, r7, pc}

080057bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fd1c 	bl	800721a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fd47 	bl	800727c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	7b1b      	ldrb	r3, [r3, #12]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00e      	beq.n	800581a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	7b1b      	ldrb	r3, [r3, #12]
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f001 fd09 	bl	800721a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	4619      	mov	r1, r3
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fd34 	bl	800727c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	7b5b      	ldrb	r3, [r3, #13]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	7b5b      	ldrb	r3, [r3, #13]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f001 fcf6 	bl	800721a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	7b5b      	ldrb	r3, [r3, #13]
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f001 fd21 	bl	800727c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	4618      	mov	r0, r3
 8005856:	f002 f88d 	bl	8007974 <free>
    phost->pActiveClass->pData = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005860:	2200      	movs	r2, #0
 8005862:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3340      	adds	r3, #64	; 0x40
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f8b1 	bl	80059ee <GetLineCoding>
 800588c:	4603      	mov	r3, r0
 800588e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800589c:	2102      	movs	r1, #2
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80058a2:	7afb      	ldrb	r3, [r7, #11]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80058b4:	2301      	movs	r3, #1
 80058b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d877      	bhi.n	80059c0 <USBH_CDC_Process+0x114>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <USBH_CDC_Process+0x2c>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	080058ed 	.word	0x080058ed
 80058dc:	080058f3 	.word	0x080058f3
 80058e0:	08005923 	.word	0x08005923
 80058e4:	08005997 	.word	0x08005997
 80058e8:	080059a5 	.word	0x080059a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]
      break;
 80058f0:	e06d      	b.n	80059ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f897 	bl	8005a2c <SetLineCoding>
 80058fe:	4603      	mov	r3, r0
 8005900:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005910:	e058      	b.n	80059c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d055      	beq.n	80059c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2204      	movs	r2, #4
 800591c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005920:	e050      	b.n	80059c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3340      	adds	r3, #64	; 0x40
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f860 	bl	80059ee <GetLineCoding>
 800592e:	4603      	mov	r3, r0
 8005930:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d126      	bne.n	8005986 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594a:	791b      	ldrb	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d13b      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800595c:	429a      	cmp	r2, r3
 800595e:	d133      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800596c:	429a      	cmp	r2, r3
 800596e:	d12b      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005978:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800597a:	429a      	cmp	r2, r3
 800597c:	d124      	bne.n	80059c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f95a 	bl	8005c38 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005984:	e020      	b.n	80059c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d01d      	beq.n	80059c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2204      	movs	r2, #4
 8005990:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005994:	e018      	b.n	80059c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f867 	bl	8005a6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8dc 	bl	8005b5a <CDC_ProcessReception>
      break;
 80059a2:	e014      	b.n	80059ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80059a4:	2100      	movs	r1, #0
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 ffe5 	bl	8006976 <USBH_ClrFeature>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80059be:	e005      	b.n	80059cc <USBH_CDC_Process+0x120>

    default:
      break;
 80059c0:	bf00      	nop
 80059c2:	e004      	b.n	80059ce <USBH_CDC_Process+0x122>
      break;
 80059c4:	bf00      	nop
 80059c6:	e002      	b.n	80059ce <USBH_CDC_Process+0x122>
      break;
 80059c8:	bf00      	nop
 80059ca:	e000      	b.n	80059ce <USBH_CDC_Process+0x122>
      break;
 80059cc:	bf00      	nop

  }

  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	22a1      	movs	r2, #161	; 0xa1
 80059fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2221      	movs	r2, #33	; 0x21
 8005a02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2207      	movs	r2, #7
 8005a14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2207      	movs	r2, #7
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f98a 	bl	8006d36 <USBH_CtlReq>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2221      	movs	r2, #33	; 0x21
 8005a3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2207      	movs	r2, #7
 8005a52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2207      	movs	r2, #7
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f96b 	bl	8006d36 <USBH_CtlReq>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af02      	add	r7, sp, #8
 8005a70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d002      	beq.n	8005a90 <CDC_ProcessTransmission+0x26>
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d025      	beq.n	8005ada <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8005a8e:	e060      	b.n	8005b52 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	8b12      	ldrh	r2, [r2, #24]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d90c      	bls.n	8005ab6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8b1a      	ldrh	r2, [r3, #24]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	7b58      	ldrb	r0, [r3, #13]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	4603      	mov	r3, r0
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fb51 	bl	8007156 <USBH_BulkSendData>
 8005ab4:	e00c      	b.n	8005ad0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7b58      	ldrb	r0, [r3, #13]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4603      	mov	r3, r0
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f001 fb43 	bl	8007156 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ad8:	e03b      	b.n	8005b52 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	7b5b      	ldrb	r3, [r3, #13]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fe65 	bl	80077b0 <USBH_LL_GetURBState>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d128      	bne.n	8005b42 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	8b12      	ldrh	r2, [r2, #24]
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d90e      	bls.n	8005b1a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	8b12      	ldrh	r2, [r2, #24]
 8005b04:	1a9a      	subs	r2, r3, r2
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	8b12      	ldrh	r2, [r2, #24]
 8005b12:	441a      	add	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	61da      	str	r2, [r3, #28]
 8005b18:	e002      	b.n	8005b20 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b30:	e00e      	b.n	8005b50 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f868 	bl	8005c10 <USBH_CDC_TransmitCallback>
      break;
 8005b40:	e006      	b.n	8005b50 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b42:	7afb      	ldrb	r3, [r7, #11]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d103      	bne.n	8005b50 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b50:	bf00      	nop
  }
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d002      	beq.n	8005b80 <CDC_ProcessReception+0x26>
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d00e      	beq.n	8005b9c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b7e:	e043      	b.n	8005c08 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	6a19      	ldr	r1, [r3, #32]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	8b5a      	ldrh	r2, [r3, #26]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	7b1b      	ldrb	r3, [r3, #12]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fb07 	bl	80071a0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b9a:	e035      	b.n	8005c08 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	7b1b      	ldrb	r3, [r3, #12]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fe04 	bl	80077b0 <USBH_LL_GetURBState>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d129      	bne.n	8005c06 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	7b1b      	ldrb	r3, [r3, #12]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 fd67 	bl	800768c <USBH_LL_GetLastXferSize>
 8005bbe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d016      	beq.n	8005bf8 <CDC_ProcessReception+0x9e>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	8b5b      	ldrh	r3, [r3, #26]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d910      	bls.n	8005bf8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bf6:	e006      	b.n	8005c06 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f80f 	bl	8005c24 <USBH_CDC_ReceiveCallback>
      break;
 8005c06:	bf00      	nop
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c60:	2302      	movs	r3, #2
 8005c62:	e029      	b.n	8005cb8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	79fa      	ldrb	r2, [r7, #7]
 8005c68:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f81f 	bl	8005cc0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f001 fc39 	bl	8007528 <USBH_LL_Init>

  return USBH_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	e009      	b.n	8005ce6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	33e0      	adds	r3, #224	; 0xe0
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b0e      	cmp	r3, #14
 8005cea:	d9f2      	bls.n	8005cd2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e009      	b.n	8005d06 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d3f1      	bcc.n	8005cf2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2240      	movs	r2, #64	; 0x40
 8005d32:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d016      	beq.n	8005daa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10e      	bne.n	8005da4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	33de      	adds	r3, #222	; 0xde
 8005d98:	6839      	ldr	r1, [r7, #0]
 8005d9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
 8005da2:	e004      	b.n	8005dae <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005da4:	2302      	movs	r3, #2
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e001      	b.n	8005dae <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005daa:	2302      	movs	r3, #2
 8005dac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d204      	bcs.n	8005de2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005de0:	e001      	b.n	8005de6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005de2:	2302      	movs	r3, #2
 8005de4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	70fb      	strb	r3, [r7, #3]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70bb      	strb	r3, [r7, #2]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e1c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e1e:	e025      	b.n	8005e6c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	221a      	movs	r2, #26
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	3308      	adds	r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3302      	adds	r3, #2
 8005e30:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	795b      	ldrb	r3, [r3, #5]
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d002      	beq.n	8005e42 <USBH_FindInterface+0x4e>
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	2bff      	cmp	r3, #255	; 0xff
 8005e40:	d111      	bne.n	8005e66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e46:	78ba      	ldrb	r2, [r7, #2]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d002      	beq.n	8005e52 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e4c:	78bb      	ldrb	r3, [r7, #2]
 8005e4e:	2bff      	cmp	r3, #255	; 0xff
 8005e50:	d109      	bne.n	8005e66 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e56:	787a      	ldrb	r2, [r7, #1]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d002      	beq.n	8005e62 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e5c:	787b      	ldrb	r3, [r7, #1]
 8005e5e:	2bff      	cmp	r3, #255	; 0xff
 8005e60:	d101      	bne.n	8005e66 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	e006      	b.n	8005e74 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d9d6      	bls.n	8005e20 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e72:	23ff      	movs	r3, #255	; 0xff
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	371c      	adds	r7, #28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 fb89 	bl	80075a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005e8e:	2101      	movs	r1, #1
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 fca0 	bl	80077d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af04      	add	r7, sp, #16
 8005ea6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d102      	bne.n	8005ec2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2203      	movs	r2, #3
 8005ec0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b0b      	cmp	r3, #11
 8005eca:	f200 81b3 	bhi.w	8006234 <USBH_Process+0x394>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <USBH_Process+0x34>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005f37 	.word	0x08005f37
 8005edc:	08005f9f 	.word	0x08005f9f
 8005ee0:	080061cf 	.word	0x080061cf
 8005ee4:	08006235 	.word	0x08006235
 8005ee8:	08006043 	.word	0x08006043
 8005eec:	08006175 	.word	0x08006175
 8005ef0:	08006079 	.word	0x08006079
 8005ef4:	08006099 	.word	0x08006099
 8005ef8:	080060b9 	.word	0x080060b9
 8005efc:	080060e7 	.word	0x080060e7
 8005f00:	080061b7 	.word	0x080061b7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8193 	beq.w	8006238 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f18:	20c8      	movs	r0, #200	; 0xc8
 8005f1a:	f001 fca6 	bl	800786a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fb99 	bl	8007656 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f34:	e180      	b.n	8006238 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d107      	bne.n	8005f50 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005f4e:	e182      	b.n	8006256 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5a:	d914      	bls.n	8005f86 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d903      	bls.n	8005f7e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	220d      	movs	r2, #13
 8005f7a:	701a      	strb	r2, [r3, #0]
      break;
 8005f7c:	e16b      	b.n	8006256 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]
      break;
 8005f84:	e167      	b.n	8006256 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f8c:	f103 020a 	add.w	r2, r3, #10
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f96:	200a      	movs	r0, #10
 8005f98:	f001 fc67 	bl	800786a <USBH_Delay>
      break;
 8005f9c:	e15b      	b.n	8006256 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005fae:	2104      	movs	r1, #4
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005fb4:	2064      	movs	r0, #100	; 0x64
 8005fb6:	f001 fc58 	bl	800786a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fb26 	bl	800760c <USBH_LL_GetSpeed>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2205      	movs	r2, #5
 8005fce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f931 	bl	800723a <USBH_AllocPipe>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005fe0:	2180      	movs	r1, #128	; 0x80
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f001 f929 	bl	800723a <USBH_AllocPipe>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	7919      	ldrb	r1, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006004:	b292      	uxth	r2, r2
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4603      	mov	r3, r0
 8006010:	2280      	movs	r2, #128	; 0x80
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 f8e2 	bl	80071dc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	7959      	ldrb	r1, [r3, #5]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800602c:	b292      	uxth	r2, r2
 800602e:	9202      	str	r2, [sp, #8]
 8006030:	2200      	movs	r2, #0
 8006032:	9201      	str	r2, [sp, #4]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	4603      	mov	r3, r0
 8006038:	2200      	movs	r2, #0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 f8ce 	bl	80071dc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006040:	e109      	b.n	8006256 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f90c 	bl	8006260 <USBH_HandleEnum>
 8006048:	4603      	mov	r3, r0
 800604a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800604c:	7bbb      	ldrb	r3, [r7, #14]
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 80f3 	bne.w	800623c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006064:	2b01      	cmp	r3, #1
 8006066:	d103      	bne.n	8006070 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2208      	movs	r2, #8
 800606c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800606e:	e0e5      	b.n	800623c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2207      	movs	r2, #7
 8006074:	701a      	strb	r2, [r3, #0]
      break;
 8006076:	e0e1      	b.n	800623c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 80de 	beq.w	8006240 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800608a:	2101      	movs	r1, #1
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2208      	movs	r2, #8
 8006094:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006096:	e0d3      	b.n	8006240 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800609e:	b29b      	uxth	r3, r3
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fc20 	bl	80068e8 <USBH_SetCfg>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 80ca 	bne.w	8006244 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2209      	movs	r2, #9
 80060b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060b6:	e0c5      	b.n	8006244 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00b      	beq.n	80060de <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80060c6:	2101      	movs	r1, #1
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc30 	bl	800692e <USBH_SetFeature>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 80b9 	bne.w	8006248 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	220a      	movs	r2, #10
 80060da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060dc:	e0b4      	b.n	8006248 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220a      	movs	r2, #10
 80060e2:	701a      	strb	r2, [r3, #0]
      break;
 80060e4:	e0b0      	b.n	8006248 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80ad 	beq.w	800624c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	e016      	b.n	800612e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006100:	7bfa      	ldrb	r2, [r7, #15]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	32de      	adds	r2, #222	; 0xde
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	791a      	ldrb	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006112:	429a      	cmp	r2, r3
 8006114:	d108      	bne.n	8006128 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	32de      	adds	r2, #222	; 0xde
 800611c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006126:	e005      	b.n	8006134 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	3301      	adds	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0e5      	beq.n	8006100 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d016      	beq.n	800616c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2206      	movs	r2, #6
 8006154:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800615c:	2103      	movs	r1, #3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006162:	e073      	b.n	800624c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	220d      	movs	r2, #13
 8006168:	701a      	strb	r2, [r3, #0]
      break;
 800616a:	e06f      	b.n	800624c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	220d      	movs	r2, #13
 8006170:	701a      	strb	r2, [r3, #0]
      break;
 8006172:	e06b      	b.n	800624c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d017      	beq.n	80061ae <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
 800618a:	4603      	mov	r3, r0
 800618c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	220b      	movs	r2, #11
 800619a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800619c:	e058      	b.n	8006250 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d154      	bne.n	8006250 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	220d      	movs	r2, #13
 80061aa:	701a      	strb	r2, [r3, #0]
      break;
 80061ac:	e050      	b.n	8006250 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	220d      	movs	r2, #13
 80061b2:	701a      	strb	r2, [r3, #0]
      break;
 80061b4:	e04c      	b.n	8006250 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d049      	beq.n	8006254 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
      }
      break;
 80061cc:	e042      	b.n	8006254 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff fd72 	bl	8005cc0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d009      	beq.n	80061fa <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800620a:	2105      	movs	r1, #5
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d107      	bne.n	800622c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe2b 	bl	8005e80 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800622a:	e014      	b.n	8006256 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 f9b7 	bl	80075a0 <USBH_LL_Start>
      break;
 8006232:	e010      	b.n	8006256 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006234:	bf00      	nop
 8006236:	e00e      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 8006238:	bf00      	nop
 800623a:	e00c      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 800623c:	bf00      	nop
 800623e:	e00a      	b.n	8006256 <USBH_Process+0x3b6>
    break;
 8006240:	bf00      	nop
 8006242:	e008      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 8006244:	bf00      	nop
 8006246:	e006      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 8006248:	bf00      	nop
 800624a:	e004      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 800624c:	bf00      	nop
 800624e:	e002      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <USBH_Process+0x3b6>
      break;
 8006254:	bf00      	nop
  }
  return USBH_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af04      	add	r7, sp, #16
 8006266:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800626c:	2301      	movs	r3, #1
 800626e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b07      	cmp	r3, #7
 8006276:	f200 81c1 	bhi.w	80065fc <USBH_HandleEnum+0x39c>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <USBH_HandleEnum+0x20>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062a1 	.word	0x080062a1
 8006284:	0800635f 	.word	0x0800635f
 8006288:	080063c9 	.word	0x080063c9
 800628c:	08006457 	.word	0x08006457
 8006290:	080064c1 	.word	0x080064c1
 8006294:	08006531 	.word	0x08006531
 8006298:	08006577 	.word	0x08006577
 800629c:	080065bd 	.word	0x080065bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80062a0:	2108      	movs	r1, #8
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa50 	bl	8006748 <USBH_Get_DevDesc>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062ac:	7bbb      	ldrb	r3, [r7, #14]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d130      	bne.n	8006314 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	7919      	ldrb	r1, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062d6:	b292      	uxth	r2, r2
 80062d8:	9202      	str	r2, [sp, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 ff79 	bl	80071dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7959      	ldrb	r1, [r3, #5]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062fe:	b292      	uxth	r2, r2
 8006300:	9202      	str	r2, [sp, #8]
 8006302:	2200      	movs	r2, #0
 8006304:	9201      	str	r2, [sp, #4]
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	4603      	mov	r3, r0
 800630a:	2200      	movs	r2, #0
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 ff65 	bl	80071dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006312:	e175      	b.n	8006600 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006314:	7bbb      	ldrb	r3, [r7, #14]
 8006316:	2b03      	cmp	r3, #3
 8006318:	f040 8172 	bne.w	8006600 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006322:	3301      	adds	r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006332:	2b03      	cmp	r3, #3
 8006334:	d903      	bls.n	800633e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	220d      	movs	r2, #13
 800633a:	701a      	strb	r2, [r3, #0]
      break;
 800633c:	e160      	b.n	8006600 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	795b      	ldrb	r3, [r3, #5]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 ff99 	bl	800727c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	791b      	ldrb	r3, [r3, #4]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 ff93 	bl	800727c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	701a      	strb	r2, [r3, #0]
      break;
 800635c:	e150      	b.n	8006600 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800635e:	2112      	movs	r1, #18
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f9f1 	bl	8006748 <USBH_Get_DevDesc>
 8006366:	4603      	mov	r3, r0
 8006368:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006376:	e145      	b.n	8006604 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	2b03      	cmp	r3, #3
 800637c:	f040 8142 	bne.w	8006604 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006386:	3301      	adds	r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006396:	2b03      	cmp	r3, #3
 8006398:	d903      	bls.n	80063a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	220d      	movs	r2, #13
 800639e:	701a      	strb	r2, [r3, #0]
      break;
 80063a0:	e130      	b.n	8006604 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	795b      	ldrb	r3, [r3, #5]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 ff67 	bl	800727c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	791b      	ldrb	r3, [r3, #4]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 ff61 	bl	800727c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
      break;
 80063c6:	e11d      	b.n	8006604 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80063c8:	2101      	movs	r1, #1
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa68 	bl	80068a0 <USBH_SetAddress>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063d4:	7bbb      	ldrb	r3, [r7, #14]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d132      	bne.n	8006440 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80063da:	2002      	movs	r0, #2
 80063dc:	f001 fa45 	bl	800786a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2203      	movs	r2, #3
 80063ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7919      	ldrb	r1, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006402:	b292      	uxth	r2, r2
 8006404:	9202      	str	r2, [sp, #8]
 8006406:	2200      	movs	r2, #0
 8006408:	9201      	str	r2, [sp, #4]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4603      	mov	r3, r0
 800640e:	2280      	movs	r2, #128	; 0x80
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fee3 	bl	80071dc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	7959      	ldrb	r1, [r3, #5]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800642a:	b292      	uxth	r2, r2
 800642c:	9202      	str	r2, [sp, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	9201      	str	r2, [sp, #4]
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4603      	mov	r3, r0
 8006436:	2200      	movs	r2, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fecf 	bl	80071dc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800643e:	e0e3      	b.n	8006608 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b03      	cmp	r3, #3
 8006444:	f040 80e0 	bne.w	8006608 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	220d      	movs	r2, #13
 800644c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	705a      	strb	r2, [r3, #1]
      break;
 8006454:	e0d8      	b.n	8006608 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006456:	2109      	movs	r1, #9
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f99d 	bl	8006798 <USBH_Get_CfgDesc>
 800645e:	4603      	mov	r3, r0
 8006460:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2204      	movs	r2, #4
 800646c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800646e:	e0cd      	b.n	800660c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006470:	7bbb      	ldrb	r3, [r7, #14]
 8006472:	2b03      	cmp	r3, #3
 8006474:	f040 80ca 	bne.w	800660c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800647e:	3301      	adds	r3, #1
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800648e:	2b03      	cmp	r3, #3
 8006490:	d903      	bls.n	800649a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220d      	movs	r2, #13
 8006496:	701a      	strb	r2, [r3, #0]
      break;
 8006498:	e0b8      	b.n	800660c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	795b      	ldrb	r3, [r3, #5]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 feeb 	bl	800727c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fee5 	bl	800727c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
      break;
 80064be:	e0a5      	b.n	800660c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f965 	bl	8006798 <USBH_Get_CfgDesc>
 80064ce:	4603      	mov	r3, r0
 80064d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2205      	movs	r2, #5
 80064dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064de:	e097      	b.n	8006610 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	f040 8094 	bne.w	8006610 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ee:	3301      	adds	r3, #1
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d903      	bls.n	800650a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	220d      	movs	r2, #13
 8006506:	701a      	strb	r2, [r3, #0]
      break;
 8006508:	e082      	b.n	8006610 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	795b      	ldrb	r3, [r3, #5]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 feb3 	bl	800727c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fead 	bl	800727c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
      break;
 800652e:	e06f      	b.n	8006610 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006536:	2b00      	cmp	r3, #0
 8006538:	d019      	beq.n	800656e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006546:	23ff      	movs	r3, #255	; 0xff
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f949 	bl	80067e0 <USBH_Get_StringDesc>
 800654e:	4603      	mov	r3, r0
 8006550:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006552:	7bbb      	ldrb	r3, [r7, #14]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d103      	bne.n	8006560 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2206      	movs	r2, #6
 800655c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800655e:	e059      	b.n	8006614 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006560:	7bbb      	ldrb	r3, [r7, #14]
 8006562:	2b03      	cmp	r3, #3
 8006564:	d156      	bne.n	8006614 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2206      	movs	r2, #6
 800656a:	705a      	strb	r2, [r3, #1]
      break;
 800656c:	e052      	b.n	8006614 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2206      	movs	r2, #6
 8006572:	705a      	strb	r2, [r3, #1]
      break;
 8006574:	e04e      	b.n	8006614 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800657c:	2b00      	cmp	r3, #0
 800657e:	d019      	beq.n	80065b4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800658c:	23ff      	movs	r3, #255	; 0xff
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f926 	bl	80067e0 <USBH_Get_StringDesc>
 8006594:	4603      	mov	r3, r0
 8006596:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d103      	bne.n	80065a6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2207      	movs	r2, #7
 80065a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065a4:	e038      	b.n	8006618 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065a6:	7bbb      	ldrb	r3, [r7, #14]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d135      	bne.n	8006618 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2207      	movs	r2, #7
 80065b0:	705a      	strb	r2, [r3, #1]
      break;
 80065b2:	e031      	b.n	8006618 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2207      	movs	r2, #7
 80065b8:	705a      	strb	r2, [r3, #1]
      break;
 80065ba:	e02d      	b.n	8006618 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065d2:	23ff      	movs	r3, #255	; 0xff
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f903 	bl	80067e0 <USBH_Get_StringDesc>
 80065da:	4603      	mov	r3, r0
 80065dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d102      	bne.n	80065ea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80065e8:	e018      	b.n	800661c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d115      	bne.n	800661c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
      break;
 80065f4:	e012      	b.n	800661c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
      break;
 80065fa:	e00f      	b.n	800661c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80065fc:	bf00      	nop
 80065fe:	e00e      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006600:	bf00      	nop
 8006602:	e00c      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006604:	bf00      	nop
 8006606:	e00a      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006608:	bf00      	nop
 800660a:	e008      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 800660c:	bf00      	nop
 800660e:	e006      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006610:	bf00      	nop
 8006612:	e004      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006614:	bf00      	nop
 8006616:	e002      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 8006618:	bf00      	nop
 800661a:	e000      	b.n	800661e <USBH_HandleEnum+0x3be>
      break;
 800661c:	bf00      	nop
  }
  return Status;
 800661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f804 	bl	800666a <USBH_HandleSof>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b0b      	cmp	r3, #11
 800667a:	d10a      	bne.n	8006692 <USBH_HandleSof+0x28>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80066aa:	bf00      	nop
}
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066c6:	bf00      	nop
}
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 ff58 	bl	80075d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	791b      	ldrb	r3, [r3, #4]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fda5 	bl	800727c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	795b      	ldrb	r3, [r3, #5]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fd9f 	bl	800727c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af02      	add	r7, sp, #8
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	b29b      	uxth	r3, r3
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006766:	2100      	movs	r1, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f864 	bl	8006836 <USBH_GetDescriptor>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006784:	78fa      	ldrb	r2, [r7, #3]
 8006786:	b292      	uxth	r2, r2
 8006788:	4619      	mov	r1, r3
 800678a:	f000 f918 	bl	80069be <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af02      	add	r7, sp, #8
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	331c      	adds	r3, #28
 80067a8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80067aa:	887b      	ldrh	r3, [r7, #2]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b4:	2100      	movs	r1, #0
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f83d 	bl	8006836 <USBH_GetDescriptor>
 80067bc:	4603      	mov	r3, r0
 80067be:	72fb      	strb	r3, [r7, #11]
 80067c0:	7afb      	ldrb	r3, [r7, #11]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80067cc:	887a      	ldrh	r2, [r7, #2]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f964 	bl	8006a9e <USBH_ParseCfgDesc>
  }

  return status;
 80067d6:	7afb      	ldrb	r3, [r7, #11]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	461a      	mov	r2, r3
 80067ec:	460b      	mov	r3, r1
 80067ee:	72fb      	strb	r3, [r7, #11]
 80067f0:	4613      	mov	r3, r2
 80067f2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80067f4:	7afb      	ldrb	r3, [r7, #11]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067fc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006804:	893b      	ldrh	r3, [r7, #8]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	460b      	mov	r3, r1
 800680a:	2100      	movs	r1, #0
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f812 	bl	8006836 <USBH_GetDescriptor>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d107      	bne.n	800682c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006822:	893a      	ldrh	r2, [r7, #8]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fa37 	bl	8006c9a <USBH_ParseStringDesc>
  }

  return status;
 800682c:	7dfb      	ldrb	r3, [r7, #23]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	607b      	str	r3, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	72fb      	strb	r3, [r7, #11]
 8006844:	4613      	mov	r3, r2
 8006846:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	789b      	ldrb	r3, [r3, #2]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d11c      	bne.n	800688a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006850:	7afb      	ldrb	r3, [r7, #11]
 8006852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2206      	movs	r2, #6
 8006860:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	893a      	ldrh	r2, [r7, #8]
 8006866:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006868:	893b      	ldrh	r3, [r7, #8]
 800686a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800686e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006872:	d104      	bne.n	800687e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f240 4209 	movw	r2, #1033	; 0x409
 800687a:	829a      	strh	r2, [r3, #20]
 800687c:	e002      	b.n	8006884 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8b3a      	ldrh	r2, [r7, #24]
 8006888:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800688a:	8b3b      	ldrh	r3, [r7, #24]
 800688c:	461a      	mov	r2, r3
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 fa50 	bl	8006d36 <USBH_CtlReq>
 8006896:	4603      	mov	r3, r0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	789b      	ldrb	r3, [r3, #2]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d10f      	bne.n	80068d4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2205      	movs	r2, #5
 80068be:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80068d4:	2200      	movs	r2, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa2c 	bl	8006d36 <USBH_CtlReq>
 80068de:	4603      	mov	r3, r0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	789b      	ldrb	r3, [r3, #2]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10e      	bne.n	800691a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2209      	movs	r2, #9
 8006906:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	887a      	ldrh	r2, [r7, #2]
 800690c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800691a:	2200      	movs	r2, #0
 800691c:	2100      	movs	r1, #0
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa09 	bl	8006d36 <USBH_CtlReq>
 8006924:	4603      	mov	r3, r0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	789b      	ldrb	r3, [r3, #2]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d10f      	bne.n	8006962 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2203      	movs	r2, #3
 800694c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006962:	2200      	movs	r2, #0
 8006964:	2100      	movs	r1, #0
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f9e5 	bl	8006d36 <USBH_CtlReq>
 800696c:	4603      	mov	r3, r0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	789b      	ldrb	r3, [r3, #2]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d10f      	bne.n	80069aa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2202      	movs	r2, #2
 800698e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	b29a      	uxth	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f9c1 	bl	8006d36 <USBH_CtlReq>
 80069b4:	4603      	mov	r3, r0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	785a      	ldrb	r2, [r3, #1]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3302      	adds	r3, #2
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	3303      	adds	r3, #3
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	791a      	ldrb	r2, [r3, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	795a      	ldrb	r2, [r3, #5]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	799a      	ldrb	r2, [r3, #6]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	79da      	ldrb	r2, [r3, #7]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d939      	bls.n	8006a92 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3308      	adds	r3, #8
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3309      	adds	r3, #9
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	4313      	orrs	r3, r2
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	330a      	adds	r3, #10
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	330b      	adds	r3, #11
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	021b      	lsls	r3, r3, #8
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	330d      	adds	r3, #13
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	7b9a      	ldrb	r2, [r3, #14]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7bda      	ldrb	r2, [r3, #15]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	7c1a      	ldrb	r2, [r3, #16]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	7c5a      	ldrb	r2, [r3, #17]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	745a      	strb	r2, [r3, #17]
  }
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b08a      	sub	sp, #40	; 0x28
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	785a      	ldrb	r2, [r3, #1]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	3303      	adds	r3, #3
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	791a      	ldrb	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	795a      	ldrb	r2, [r3, #5]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	799a      	ldrb	r2, [r3, #6]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	79da      	ldrb	r2, [r3, #7]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	7a1a      	ldrb	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	2b09      	cmp	r3, #9
 8006b18:	d95f      	bls.n	8006bda <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b1a:	2309      	movs	r3, #9
 8006b1c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b22:	e051      	b.n	8006bc8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b24:	f107 0316 	add.w	r3, r7, #22
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b2c:	f000 f8e8 	bl	8006d00 <USBH_GetNextDesc>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d146      	bne.n	8006bc8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3e:	221a      	movs	r2, #26
 8006b40:	fb02 f303 	mul.w	r3, r2, r3
 8006b44:	3308      	adds	r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006b4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b50:	69f8      	ldr	r0, [r7, #28]
 8006b52:	f000 f846 	bl	8006be2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b60:	e022      	b.n	8006ba8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b62:	f107 0316 	add.w	r3, r7, #22
 8006b66:	4619      	mov	r1, r3
 8006b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b6a:	f000 f8c9 	bl	8006d00 <USBH_GetNextDesc>
 8006b6e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	785b      	ldrb	r3, [r3, #1]
 8006b74:	2b05      	cmp	r3, #5
 8006b76:	d117      	bne.n	8006ba8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006b80:	3201      	adds	r2, #1
 8006b82:	00d2      	lsls	r2, r2, #3
 8006b84:	211a      	movs	r1, #26
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	3304      	adds	r3, #4
 8006b94:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006b96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b98:	69b8      	ldr	r0, [r7, #24]
 8006b9a:	f000 f851 	bl	8006c40 <USBH_ParseEPDesc>
            ep_ix++;
 8006b9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	791b      	ldrb	r3, [r3, #4]
 8006bac:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d204      	bcs.n	8006bbe <USBH_ParseCfgDesc+0x120>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	885a      	ldrh	r2, [r3, #2]
 8006bb8:	8afb      	ldrh	r3, [r7, #22]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d8d1      	bhi.n	8006b62 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d804      	bhi.n	8006bda <USBH_ParseCfgDesc+0x13c>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	885a      	ldrh	r2, [r3, #2]
 8006bd4:	8afb      	ldrh	r3, [r7, #22]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d8a4      	bhi.n	8006b24 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785a      	ldrb	r2, [r3, #1]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	789a      	ldrb	r2, [r3, #2]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	78da      	ldrb	r2, [r3, #3]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	791a      	ldrb	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	795a      	ldrb	r2, [r3, #5]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	799a      	ldrb	r2, [r3, #6]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	79da      	ldrb	r2, [r3, #7]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	7a1a      	ldrb	r2, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	721a      	strb	r2, [r3, #8]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	785a      	ldrb	r2, [r3, #1]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	789a      	ldrb	r2, [r3, #2]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	78da      	ldrb	r2, [r3, #3]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3305      	adds	r3, #5
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	799a      	ldrb	r2, [r3, #6]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	719a      	strb	r2, [r3, #6]
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b087      	sub	sp, #28
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d120      	bne.n	8006cf4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	1e9a      	subs	r2, r3, #2
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	bf28      	it	cs
 8006cbe:	4613      	movcs	r3, r2
 8006cc0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	82fb      	strh	r3, [r7, #22]
 8006ccc:	e00b      	b.n	8006ce6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006ce0:	8afb      	ldrh	r3, [r7, #22]
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	82fb      	strh	r3, [r7, #22]
 8006ce6:	8afa      	ldrh	r2, [r7, #22]
 8006ce8:	8abb      	ldrh	r3, [r7, #20]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3ef      	bcc.n	8006cce <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	881a      	ldrh	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d28:	68fb      	ldr	r3, [r7, #12]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b086      	sub	sp, #24
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d44:	2301      	movs	r3, #1
 8006d46:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	789b      	ldrb	r3, [r3, #2]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d002      	beq.n	8006d56 <USBH_CtlReq+0x20>
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d00f      	beq.n	8006d74 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006d54:	e027      	b.n	8006da6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2201      	movs	r2, #1
 8006d66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	e018      	b.n	8006da6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f81b 	bl	8006db0 <USBH_HandleControl>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <USBH_CtlReq+0x54>
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d106      	bne.n	8006d98 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	761a      	strb	r2, [r3, #24]
      break;
 8006d96:	e005      	b.n	8006da4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d102      	bne.n	8006da4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	709a      	strb	r2, [r3, #2]
      break;
 8006da4:	bf00      	nop
  }
  return status;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7e1b      	ldrb	r3, [r3, #24]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2b0a      	cmp	r3, #10
 8006dc8:	f200 8158 	bhi.w	800707c <USBH_HandleControl+0x2cc>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <USBH_HandleControl+0x24>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006e01 	.word	0x08006e01
 8006dd8:	08006e1b 	.word	0x08006e1b
 8006ddc:	08006e85 	.word	0x08006e85
 8006de0:	08006eab 	.word	0x08006eab
 8006de4:	08006ee3 	.word	0x08006ee3
 8006de8:	08006f0f 	.word	0x08006f0f
 8006dec:	08006f61 	.word	0x08006f61
 8006df0:	08006f83 	.word	0x08006f83
 8006df4:	08006fbf 	.word	0x08006fbf
 8006df8:	08006fe7 	.word	0x08006fe7
 8006dfc:	08007025 	.word	0x08007025
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f103 0110 	add.w	r1, r3, #16
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f945 	bl	800709c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2202      	movs	r2, #2
 8006e16:	761a      	strb	r2, [r3, #24]
      break;
 8006e18:	e13b      	b.n	8007092 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	795b      	ldrb	r3, [r3, #5]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fcc5 	bl	80077b0 <USBH_LL_GetURBState>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d11e      	bne.n	8006e6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7c1b      	ldrb	r3, [r3, #16]
 8006e34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	8adb      	ldrh	r3, [r3, #22]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006e42:	7b7b      	ldrb	r3, [r7, #13]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d103      	bne.n	8006e50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e4e:	e117      	b.n	8007080 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2205      	movs	r2, #5
 8006e54:	761a      	strb	r2, [r3, #24]
      break;
 8006e56:	e113      	b.n	8007080 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006e58:	7b7b      	ldrb	r3, [r7, #13]
 8006e5a:	2b80      	cmp	r3, #128	; 0x80
 8006e5c:	d103      	bne.n	8006e66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2209      	movs	r2, #9
 8006e62:	761a      	strb	r2, [r3, #24]
      break;
 8006e64:	e10c      	b.n	8007080 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2207      	movs	r2, #7
 8006e6a:	761a      	strb	r2, [r3, #24]
      break;
 8006e6c:	e108      	b.n	8007080 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	d003      	beq.n	8006e7c <USBH_HandleControl+0xcc>
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	f040 8102 	bne.w	8007080 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	220b      	movs	r2, #11
 8006e80:	761a      	strb	r2, [r3, #24]
      break;
 8006e82:	e0fd      	b.n	8007080 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6899      	ldr	r1, [r3, #8]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	899a      	ldrh	r2, [r3, #12]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	791b      	ldrb	r3, [r3, #4]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f93c 	bl	800711a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	761a      	strb	r2, [r3, #24]
      break;
 8006ea8:	e0f3      	b.n	8007092 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc7d 	bl	80077b0 <USBH_LL_GetURBState>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d102      	bne.n	8006ec6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2209      	movs	r2, #9
 8006ec4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b05      	cmp	r3, #5
 8006eca:	d102      	bne.n	8006ed2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ed0:	e0d8      	b.n	8007084 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	f040 80d5 	bne.w	8007084 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220b      	movs	r2, #11
 8006ede:	761a      	strb	r2, [r3, #24]
      break;
 8006ee0:	e0d0      	b.n	8007084 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6899      	ldr	r1, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	899a      	ldrh	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	7958      	ldrb	r0, [r3, #5]
 8006eee:	2301      	movs	r3, #1
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f8eb 	bl	80070d0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2206      	movs	r2, #6
 8006f0a:	761a      	strb	r2, [r3, #24]
      break;
 8006f0c:	e0c1      	b.n	8007092 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	795b      	ldrb	r3, [r3, #5]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc4b 	bl	80077b0 <USBH_LL_GetURBState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d103      	bne.n	8006f2c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2207      	movs	r2, #7
 8006f28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f2a:	e0ad      	b.n	8007088 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	2b05      	cmp	r3, #5
 8006f30:	d105      	bne.n	8006f3e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	220c      	movs	r2, #12
 8006f36:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3c:	e0a4      	b.n	8007088 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d103      	bne.n	8006f4c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2205      	movs	r2, #5
 8006f48:	761a      	strb	r2, [r3, #24]
      break;
 8006f4a:	e09d      	b.n	8007088 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	f040 809a 	bne.w	8007088 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	220b      	movs	r2, #11
 8006f58:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5e:	e093      	b.n	8007088 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	791b      	ldrb	r3, [r3, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	2100      	movs	r1, #0
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8d6 	bl	800711a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	761a      	strb	r2, [r3, #24]

      break;
 8006f80:	e087      	b.n	8007092 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	791b      	ldrb	r3, [r3, #4]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc11 	bl	80077b0 <USBH_LL_GetURBState>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d105      	bne.n	8006fa4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	220d      	movs	r2, #13
 8006f9c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fa2:	e073      	b.n	800708c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d103      	bne.n	8006fb2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	220b      	movs	r2, #11
 8006fae:	761a      	strb	r2, [r3, #24]
      break;
 8006fb0:	e06c      	b.n	800708c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b05      	cmp	r3, #5
 8006fb6:	d169      	bne.n	800708c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e066      	b.n	800708c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	795a      	ldrb	r2, [r3, #5]
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f87f 	bl	80070d0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220a      	movs	r2, #10
 8006fe2:	761a      	strb	r2, [r3, #24]
      break;
 8006fe4:	e055      	b.n	8007092 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	795b      	ldrb	r3, [r3, #5]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fbdf 	bl	80077b0 <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	220d      	movs	r2, #13
 8007004:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007006:	e043      	b.n	8007090 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d103      	bne.n	8007016 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2209      	movs	r2, #9
 8007012:	761a      	strb	r2, [r3, #24]
      break;
 8007014:	e03c      	b.n	8007090 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b04      	cmp	r3, #4
 800701a:	d139      	bne.n	8007090 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	220b      	movs	r2, #11
 8007020:	761a      	strb	r2, [r3, #24]
      break;
 8007022:	e035      	b.n	8007090 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7e5b      	ldrb	r3, [r3, #25]
 8007028:	3301      	adds	r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	765a      	strb	r2, [r3, #25]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7e5b      	ldrb	r3, [r3, #25]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d806      	bhi.n	8007046 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007044:	e025      	b.n	8007092 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800704c:	2106      	movs	r1, #6
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	795b      	ldrb	r3, [r3, #5]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f90c 	bl	800727c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	791b      	ldrb	r3, [r3, #4]
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f906 	bl	800727c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007076:	2302      	movs	r3, #2
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	e00a      	b.n	8007092 <USBH_HandleControl+0x2e2>

    default:
      break;
 800707c:	bf00      	nop
 800707e:	e008      	b.n	8007092 <USBH_HandleControl+0x2e2>
      break;
 8007080:	bf00      	nop
 8007082:	e006      	b.n	8007092 <USBH_HandleControl+0x2e2>
      break;
 8007084:	bf00      	nop
 8007086:	e004      	b.n	8007092 <USBH_HandleControl+0x2e2>
      break;
 8007088:	bf00      	nop
 800708a:	e002      	b.n	8007092 <USBH_HandleControl+0x2e2>
      break;
 800708c:	bf00      	nop
 800708e:	e000      	b.n	8007092 <USBH_HandleControl+0x2e2>
      break;
 8007090:	bf00      	nop
  }

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af04      	add	r7, sp, #16
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070aa:	79f9      	ldrb	r1, [r7, #7]
 80070ac:	2300      	movs	r3, #0
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	2308      	movs	r3, #8
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	2300      	movs	r3, #0
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	2200      	movs	r2, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fb44 	bl	800774e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af04      	add	r7, sp, #16
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	460b      	mov	r3, r1
 80070e0:	80fb      	strh	r3, [r7, #6]
 80070e2:	4613      	mov	r3, r2
 80070e4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070f4:	7979      	ldrb	r1, [r7, #5]
 80070f6:	7e3b      	ldrb	r3, [r7, #24]
 80070f8:	9303      	str	r3, [sp, #12]
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	9302      	str	r3, [sp, #8]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2301      	movs	r3, #1
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	2200      	movs	r2, #0
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fb1f 	bl	800774e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b088      	sub	sp, #32
 800711e:	af04      	add	r7, sp, #16
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	4611      	mov	r1, r2
 8007126:	461a      	mov	r2, r3
 8007128:	460b      	mov	r3, r1
 800712a:	80fb      	strh	r3, [r7, #6]
 800712c:	4613      	mov	r3, r2
 800712e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007130:	7979      	ldrb	r1, [r7, #5]
 8007132:	2300      	movs	r3, #0
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	9302      	str	r3, [sp, #8]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2301      	movs	r3, #1
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	2201      	movs	r2, #1
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fb01 	bl	800774e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800714c:	2300      	movs	r3, #0

}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b088      	sub	sp, #32
 800715a:	af04      	add	r7, sp, #16
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	4611      	mov	r1, r2
 8007162:	461a      	mov	r2, r3
 8007164:	460b      	mov	r3, r1
 8007166:	80fb      	strh	r3, [r7, #6]
 8007168:	4613      	mov	r3, r2
 800716a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800717a:	7979      	ldrb	r1, [r7, #5]
 800717c:	7e3b      	ldrb	r3, [r7, #24]
 800717e:	9303      	str	r3, [sp, #12]
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	2301      	movs	r3, #1
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2302      	movs	r3, #2
 800718e:	2200      	movs	r2, #0
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fadc 	bl	800774e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af04      	add	r7, sp, #16
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4611      	mov	r1, r2
 80071ac:	461a      	mov	r2, r3
 80071ae:	460b      	mov	r3, r1
 80071b0:	80fb      	strh	r3, [r7, #6]
 80071b2:	4613      	mov	r3, r2
 80071b4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071b6:	7979      	ldrb	r1, [r7, #5]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9303      	str	r3, [sp, #12]
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	9302      	str	r3, [sp, #8]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	2301      	movs	r3, #1
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	2302      	movs	r3, #2
 80071ca:	2201      	movs	r2, #1
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fabe 	bl	800774e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	4608      	mov	r0, r1
 80071e6:	4611      	mov	r1, r2
 80071e8:	461a      	mov	r2, r3
 80071ea:	4603      	mov	r3, r0
 80071ec:	70fb      	strb	r3, [r7, #3]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70bb      	strb	r3, [r7, #2]
 80071f2:	4613      	mov	r3, r2
 80071f4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80071f6:	7878      	ldrb	r0, [r7, #1]
 80071f8:	78ba      	ldrb	r2, [r7, #2]
 80071fa:	78f9      	ldrb	r1, [r7, #3]
 80071fc:	8b3b      	ldrh	r3, [r7, #24]
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	7d3b      	ldrb	r3, [r7, #20]
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	7c3b      	ldrb	r3, [r7, #16]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa51 	bl	80076b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa70 	bl	8007710 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f836 	bl	80072b8 <USBH_GetFreePipe>
 800724c:	4603      	mov	r3, r0
 800724e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007250:	89fb      	ldrh	r3, [r7, #14]
 8007252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007256:	4293      	cmp	r3, r2
 8007258:	d00a      	beq.n	8007270 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800725a:	78fa      	ldrb	r2, [r7, #3]
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007266:	6879      	ldr	r1, [r7, #4]
 8007268:	33e0      	adds	r3, #224	; 0xe0
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	b2db      	uxtb	r3, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	2b0a      	cmp	r3, #10
 800728c:	d80d      	bhi.n	80072aa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	33e0      	adds	r3, #224	; 0xe0
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	685a      	ldr	r2, [r3, #4]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	33e0      	adds	r3, #224	; 0xe0
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80072c4:	2300      	movs	r3, #0
 80072c6:	73fb      	strb	r3, [r7, #15]
 80072c8:	e00f      	b.n	80072ea <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	33e0      	adds	r3, #224	; 0xe0
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d102      	bne.n	80072e4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	e007      	b.n	80072f4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	3301      	adds	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b0a      	cmp	r3, #10
 80072ee:	d9ec      	bls.n	80072ca <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80072f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007304:	2201      	movs	r2, #1
 8007306:	490e      	ldr	r1, [pc, #56]	; (8007340 <MX_USB_HOST_Init+0x40>)
 8007308:	480e      	ldr	r0, [pc, #56]	; (8007344 <MX_USB_HOST_Init+0x44>)
 800730a:	f7fe fc9f 	bl	8005c4c <USBH_Init>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007314:	f7f9 fc34 	bl	8000b80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007318:	490b      	ldr	r1, [pc, #44]	; (8007348 <MX_USB_HOST_Init+0x48>)
 800731a:	480a      	ldr	r0, [pc, #40]	; (8007344 <MX_USB_HOST_Init+0x44>)
 800731c:	f7fe fd24 	bl	8005d68 <USBH_RegisterClass>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007326:	f7f9 fc2b 	bl	8000b80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800732a:	4806      	ldr	r0, [pc, #24]	; (8007344 <MX_USB_HOST_Init+0x44>)
 800732c:	f7fe fda8 	bl	8005e80 <USBH_Start>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007336:	f7f9 fc23 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	08007361 	.word	0x08007361
 8007344:	20000200 	.word	0x20000200
 8007348:	2000000c 	.word	0x2000000c

0800734c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007350:	4802      	ldr	r0, [pc, #8]	; (800735c <MX_USB_HOST_Process+0x10>)
 8007352:	f7fe fda5 	bl	8005ea0 <USBH_Process>
}
 8007356:	bf00      	nop
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20000200 	.word	0x20000200

08007360 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	3b01      	subs	r3, #1
 8007370:	2b04      	cmp	r3, #4
 8007372:	d819      	bhi.n	80073a8 <USBH_UserProcess+0x48>
 8007374:	a201      	add	r2, pc, #4	; (adr r2, 800737c <USBH_UserProcess+0x1c>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	080073a9 	.word	0x080073a9
 8007380:	08007399 	.word	0x08007399
 8007384:	080073a9 	.word	0x080073a9
 8007388:	080073a1 	.word	0x080073a1
 800738c:	08007391 	.word	0x08007391
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <USBH_UserProcess+0x58>)
 8007392:	2203      	movs	r2, #3
 8007394:	701a      	strb	r2, [r3, #0]
  break;
 8007396:	e008      	b.n	80073aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <USBH_UserProcess+0x58>)
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
  break;
 800739e:	e004      	b.n	80073aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <USBH_UserProcess+0x58>)
 80073a2:	2201      	movs	r2, #1
 80073a4:	701a      	strb	r2, [r3, #0]
  break;
 80073a6:	e000      	b.n	80073aa <USBH_UserProcess+0x4a>

  default:
  break;
 80073a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80073aa:	bf00      	nop
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	200000b4 	.word	0x200000b4

080073bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b08a      	sub	sp, #40	; 0x28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c4:	f107 0314 	add.w	r3, r7, #20
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	605a      	str	r2, [r3, #4]
 80073ce:	609a      	str	r2, [r3, #8]
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073dc:	d147      	bne.n	800746e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
 80073e2:	4b25      	ldr	r3, [pc, #148]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	4a24      	ldr	r2, [pc, #144]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	6313      	str	r3, [r2, #48]	; 0x30
 80073ee:	4b22      	ldr	r3, [pc, #136]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80073fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007400:	2300      	movs	r3, #0
 8007402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	4619      	mov	r1, r3
 800740e:	481b      	ldr	r0, [pc, #108]	; (800747c <HAL_HCD_MspInit+0xc0>)
 8007410:	f7f9 feb0 	bl	8001174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007414:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741a:	2302      	movs	r3, #2
 800741c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741e:	2300      	movs	r3, #0
 8007420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007422:	2303      	movs	r3, #3
 8007424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007426:	230a      	movs	r3, #10
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	4619      	mov	r1, r3
 8007430:	4812      	ldr	r0, [pc, #72]	; (800747c <HAL_HCD_MspInit+0xc0>)
 8007432:	f7f9 fe9f 	bl	8001174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 800743c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007440:	6353      	str	r3, [r2, #52]	; 0x34
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	4a0b      	ldr	r2, [pc, #44]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 800744c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007450:	6453      	str	r3, [r2, #68]	; 0x44
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <HAL_HCD_MspInit+0xbc>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	2043      	movs	r0, #67	; 0x43
 8007464:	f7f9 fe4f 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007468:	2043      	movs	r0, #67	; 0x43
 800746a:	f7f9 fe68 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800746e:	bf00      	nop
 8007470:	3728      	adds	r7, #40	; 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023800 	.word	0x40023800
 800747c:	40020000 	.word	0x40020000

08007480 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff f8d9 	bl	8006646 <USBH_LL_IncTimer>
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff f911 	bl	80066d2 <USBH_LL_Connect>
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff f91a 	bl	8006700 <USBH_LL_Disconnect>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
 80074e0:	4613      	mov	r3, r2
 80074e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff f8cb 	bl	800669a <USBH_LL_PortEnabled>
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff f8cb 	bl	80066b6 <USBH_LL_PortDisabled>
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007536:	2b01      	cmp	r3, #1
 8007538:	d12a      	bne.n	8007590 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800753a:	4a18      	ldr	r2, [pc, #96]	; (800759c <USBH_LL_Init+0x74>)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <USBH_LL_Init+0x74>)
 8007546:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800754a:	4b14      	ldr	r3, [pc, #80]	; (800759c <USBH_LL_Init+0x74>)
 800754c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007550:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <USBH_LL_Init+0x74>)
 8007554:	2208      	movs	r2, #8
 8007556:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007558:	4b10      	ldr	r3, [pc, #64]	; (800759c <USBH_LL_Init+0x74>)
 800755a:	2201      	movs	r2, #1
 800755c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800755e:	4b0f      	ldr	r3, [pc, #60]	; (800759c <USBH_LL_Init+0x74>)
 8007560:	2200      	movs	r2, #0
 8007562:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007564:	4b0d      	ldr	r3, [pc, #52]	; (800759c <USBH_LL_Init+0x74>)
 8007566:	2202      	movs	r2, #2
 8007568:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800756a:	4b0c      	ldr	r3, [pc, #48]	; (800759c <USBH_LL_Init+0x74>)
 800756c:	2200      	movs	r2, #0
 800756e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007570:	480a      	ldr	r0, [pc, #40]	; (800759c <USBH_LL_Init+0x74>)
 8007572:	f7f9 ffb5 	bl	80014e0 <HAL_HCD_Init>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800757c:	f7f9 fb00 	bl	8000b80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007580:	4806      	ldr	r0, [pc, #24]	; (800759c <USBH_LL_Init+0x74>)
 8007582:	f7fa fbb9 	bl	8001cf8 <HAL_HCD_GetCurrentFrame>
 8007586:	4603      	mov	r3, r0
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff f84c 	bl	8006628 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200005d8 	.word	0x200005d8

080075a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fa fb26 	bl	8001c08 <HAL_HCD_Start>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 f95c 	bl	8007880 <USBH_Get_USB_Status>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fa fb2e 	bl	8001c4e <HAL_HCD_Stop>
 80075f2:	4603      	mov	r3, r0
 80075f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 f941 	bl	8007880 <USBH_Get_USB_Status>
 80075fe:	4603      	mov	r3, r0
 8007600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007602:	7bbb      	ldrb	r3, [r7, #14]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007614:	2301      	movs	r3, #1
 8007616:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800761e:	4618      	mov	r0, r3
 8007620:	f7fa fb78 	bl	8001d14 <HAL_HCD_GetCurrentSpeed>
 8007624:	4603      	mov	r3, r0
 8007626:	2b01      	cmp	r3, #1
 8007628:	d007      	beq.n	800763a <USBH_LL_GetSpeed+0x2e>
 800762a:	2b01      	cmp	r3, #1
 800762c:	d302      	bcc.n	8007634 <USBH_LL_GetSpeed+0x28>
 800762e:	2b02      	cmp	r3, #2
 8007630:	d006      	beq.n	8007640 <USBH_LL_GetSpeed+0x34>
 8007632:	e008      	b.n	8007646 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007634:	2300      	movs	r3, #0
 8007636:	73fb      	strb	r3, [r7, #15]
    break;
 8007638:	e008      	b.n	800764c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800763a:	2301      	movs	r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
    break;
 800763e:	e005      	b.n	800764c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007640:	2302      	movs	r3, #2
 8007642:	73fb      	strb	r3, [r7, #15]
    break;
 8007644:	e002      	b.n	800764c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
    break;
 800764a:	bf00      	nop
  }
  return  speed;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800766c:	4618      	mov	r0, r3
 800766e:	f7fa fb0b 	bl	8001c88 <HAL_HCD_ResetPort>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f901 	bl	8007880 <USBH_Get_USB_Status>
 800767e:	4603      	mov	r3, r0
 8007680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007682:	7bbb      	ldrb	r3, [r7, #14]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fa fb13 	bl	8001cce <HAL_HCD_HC_GetXferCount>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076b2:	b590      	push	{r4, r7, lr}
 80076b4:	b089      	sub	sp, #36	; 0x24
 80076b6:	af04      	add	r7, sp, #16
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	4608      	mov	r0, r1
 80076bc:	4611      	mov	r1, r2
 80076be:	461a      	mov	r2, r3
 80076c0:	4603      	mov	r3, r0
 80076c2:	70fb      	strb	r3, [r7, #3]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70bb      	strb	r3, [r7, #2]
 80076c8:	4613      	mov	r3, r2
 80076ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80076da:	787c      	ldrb	r4, [r7, #1]
 80076dc:	78ba      	ldrb	r2, [r7, #2]
 80076de:	78f9      	ldrb	r1, [r7, #3]
 80076e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	4623      	mov	r3, r4
 80076f2:	f7f9 ff57 	bl	80015a4 <HAL_HCD_HC_Init>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 f8bf 	bl	8007880 <USBH_Get_USB_Status>
 8007702:	4603      	mov	r3, r0
 8007704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007706:	7bbb      	ldrb	r3, [r7, #14]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}

08007710 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	4611      	mov	r1, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f7f9 ffd0 	bl	80016d4 <HAL_HCD_HC_Halt>
 8007734:	4603      	mov	r3, r0
 8007736:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f8a0 	bl	8007880 <USBH_Get_USB_Status>
 8007740:	4603      	mov	r3, r0
 8007742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007744:	7bbb      	ldrb	r3, [r7, #14]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800774e:	b590      	push	{r4, r7, lr}
 8007750:	b089      	sub	sp, #36	; 0x24
 8007752:	af04      	add	r7, sp, #16
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	4608      	mov	r0, r1
 8007758:	4611      	mov	r1, r2
 800775a:	461a      	mov	r2, r3
 800775c:	4603      	mov	r3, r0
 800775e:	70fb      	strb	r3, [r7, #3]
 8007760:	460b      	mov	r3, r1
 8007762:	70bb      	strb	r3, [r7, #2]
 8007764:	4613      	mov	r3, r2
 8007766:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007776:	787c      	ldrb	r4, [r7, #1]
 8007778:	78ba      	ldrb	r2, [r7, #2]
 800777a:	78f9      	ldrb	r1, [r7, #3]
 800777c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007780:	9303      	str	r3, [sp, #12]
 8007782:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007784:	9302      	str	r3, [sp, #8]
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	4623      	mov	r3, r4
 8007792:	f7f9 ffc3 	bl	800171c <HAL_HCD_HC_SubmitRequest>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f86f 	bl	8007880 <USBH_Get_USB_Status>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd90      	pop	{r4, r7, pc}

080077b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	4611      	mov	r1, r2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fa fa6c 	bl	8001ca4 <HAL_HCD_HC_GetURBState>
 80077cc:	4603      	mov	r3, r0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d103      	bne.n	80077f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 f872 	bl	80078d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80077f4:	20c8      	movs	r0, #200	; 0xc8
 80077f6:	f7f9 fb89 	bl	8000f0c <HAL_Delay>
  return USBH_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	4613      	mov	r3, r2
 8007812:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800781a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800781c:	78fa      	ldrb	r2, [r7, #3]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	440b      	add	r3, r1
 800782a:	333b      	adds	r3, #59	; 0x3b
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	440b      	add	r3, r1
 8007840:	3350      	adds	r3, #80	; 0x50
 8007842:	78ba      	ldrb	r2, [r7, #2]
 8007844:	701a      	strb	r2, [r3, #0]
 8007846:	e009      	b.n	800785c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	440b      	add	r3, r1
 8007856:	3351      	adds	r3, #81	; 0x51
 8007858:	78ba      	ldrb	r2, [r7, #2]
 800785a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7f9 fb4a 	bl	8000f0c <HAL_Delay>
}
 8007878:	bf00      	nop
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d817      	bhi.n	80078c4 <USBH_Get_USB_Status+0x44>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <USBH_Get_USB_Status+0x1c>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078ad 	.word	0x080078ad
 80078a0:	080078b3 	.word	0x080078b3
 80078a4:	080078b9 	.word	0x080078b9
 80078a8:	080078bf 	.word	0x080078bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73fb      	strb	r3, [r7, #15]
    break;
 80078b0:	e00b      	b.n	80078ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80078b2:	2302      	movs	r3, #2
 80078b4:	73fb      	strb	r3, [r7, #15]
    break;
 80078b6:	e008      	b.n	80078ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
    break;
 80078bc:	e005      	b.n	80078ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80078be:	2302      	movs	r3, #2
 80078c0:	73fb      	strb	r3, [r7, #15]
    break;
 80078c2:	e002      	b.n	80078ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80078c4:	2302      	movs	r3, #2
 80078c6:	73fb      	strb	r3, [r7, #15]
    break;
 80078c8:	bf00      	nop
  }
  return usb_status;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4603      	mov	r3, r0
 80078e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	e001      	b.n	80078f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	461a      	mov	r2, r3
 80078fa:	2101      	movs	r1, #1
 80078fc:	4803      	ldr	r0, [pc, #12]	; (800790c <MX_DriverVbusFS+0x34>)
 80078fe:	f7f9 fdbb 	bl	8001478 <HAL_GPIO_WritePin>
}
 8007902:	bf00      	nop
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40020800 	.word	0x40020800

08007910 <__errno>:
 8007910:	4b01      	ldr	r3, [pc, #4]	; (8007918 <__errno+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000002c 	.word	0x2000002c

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4e0d      	ldr	r6, [pc, #52]	; (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	; (8007958 <__libc_init_array+0x3c>)
 8007922:	1ba4      	subs	r4, r4, r6
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2500      	movs	r5, #0
 8007928:	42a5      	cmp	r5, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4e0b      	ldr	r6, [pc, #44]	; (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	; (8007960 <__libc_init_array+0x44>)
 8007930:	f000 f8ea 	bl	8007b08 <_init>
 8007934:	1ba4      	subs	r4, r4, r6
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2500      	movs	r5, #0
 800793a:	42a5      	cmp	r5, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007944:	4798      	blx	r3
 8007946:	3501      	adds	r5, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800794e:	4798      	blx	r3
 8007950:	3501      	adds	r5, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	08007b44 	.word	0x08007b44
 8007958:	08007b44 	.word	0x08007b44
 800795c:	08007b44 	.word	0x08007b44
 8007960:	08007b48 	.word	0x08007b48

08007964 <malloc>:
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <malloc+0xc>)
 8007966:	4601      	mov	r1, r0
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	f000 b861 	b.w	8007a30 <_malloc_r>
 800796e:	bf00      	nop
 8007970:	2000002c 	.word	0x2000002c

08007974 <free>:
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <free+0xc>)
 8007976:	4601      	mov	r1, r0
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	f000 b80b 	b.w	8007994 <_free_r>
 800797e:	bf00      	nop
 8007980:	2000002c 	.word	0x2000002c

08007984 <memset>:
 8007984:	4402      	add	r2, r0
 8007986:	4603      	mov	r3, r0
 8007988:	4293      	cmp	r3, r2
 800798a:	d100      	bne.n	800798e <memset+0xa>
 800798c:	4770      	bx	lr
 800798e:	f803 1b01 	strb.w	r1, [r3], #1
 8007992:	e7f9      	b.n	8007988 <memset+0x4>

08007994 <_free_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4605      	mov	r5, r0
 8007998:	2900      	cmp	r1, #0
 800799a:	d045      	beq.n	8007a28 <_free_r+0x94>
 800799c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079a0:	1f0c      	subs	r4, r1, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bfb8      	it	lt
 80079a6:	18e4      	addlt	r4, r4, r3
 80079a8:	f000 f8ac 	bl	8007b04 <__malloc_lock>
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <_free_r+0x98>)
 80079ae:	6813      	ldr	r3, [r2, #0]
 80079b0:	4610      	mov	r0, r2
 80079b2:	b933      	cbnz	r3, 80079c2 <_free_r+0x2e>
 80079b4:	6063      	str	r3, [r4, #4]
 80079b6:	6014      	str	r4, [r2, #0]
 80079b8:	4628      	mov	r0, r5
 80079ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079be:	f000 b8a2 	b.w	8007b06 <__malloc_unlock>
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	d90c      	bls.n	80079e0 <_free_r+0x4c>
 80079c6:	6821      	ldr	r1, [r4, #0]
 80079c8:	1862      	adds	r2, r4, r1
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bf04      	itt	eq
 80079ce:	681a      	ldreq	r2, [r3, #0]
 80079d0:	685b      	ldreq	r3, [r3, #4]
 80079d2:	6063      	str	r3, [r4, #4]
 80079d4:	bf04      	itt	eq
 80079d6:	1852      	addeq	r2, r2, r1
 80079d8:	6022      	streq	r2, [r4, #0]
 80079da:	6004      	str	r4, [r0, #0]
 80079dc:	e7ec      	b.n	80079b8 <_free_r+0x24>
 80079de:	4613      	mov	r3, r2
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	b10a      	cbz	r2, 80079e8 <_free_r+0x54>
 80079e4:	42a2      	cmp	r2, r4
 80079e6:	d9fa      	bls.n	80079de <_free_r+0x4a>
 80079e8:	6819      	ldr	r1, [r3, #0]
 80079ea:	1858      	adds	r0, r3, r1
 80079ec:	42a0      	cmp	r0, r4
 80079ee:	d10b      	bne.n	8007a08 <_free_r+0x74>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	4401      	add	r1, r0
 80079f4:	1858      	adds	r0, r3, r1
 80079f6:	4282      	cmp	r2, r0
 80079f8:	6019      	str	r1, [r3, #0]
 80079fa:	d1dd      	bne.n	80079b8 <_free_r+0x24>
 80079fc:	6810      	ldr	r0, [r2, #0]
 80079fe:	6852      	ldr	r2, [r2, #4]
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	4401      	add	r1, r0
 8007a04:	6019      	str	r1, [r3, #0]
 8007a06:	e7d7      	b.n	80079b8 <_free_r+0x24>
 8007a08:	d902      	bls.n	8007a10 <_free_r+0x7c>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	e7d3      	b.n	80079b8 <_free_r+0x24>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	1821      	adds	r1, r4, r0
 8007a14:	428a      	cmp	r2, r1
 8007a16:	bf04      	itt	eq
 8007a18:	6811      	ldreq	r1, [r2, #0]
 8007a1a:	6852      	ldreq	r2, [r2, #4]
 8007a1c:	6062      	str	r2, [r4, #4]
 8007a1e:	bf04      	itt	eq
 8007a20:	1809      	addeq	r1, r1, r0
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	605c      	str	r4, [r3, #4]
 8007a26:	e7c7      	b.n	80079b8 <_free_r+0x24>
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	bf00      	nop
 8007a2c:	200000b8 	.word	0x200000b8

08007a30 <_malloc_r>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	1ccd      	adds	r5, r1, #3
 8007a34:	f025 0503 	bic.w	r5, r5, #3
 8007a38:	3508      	adds	r5, #8
 8007a3a:	2d0c      	cmp	r5, #12
 8007a3c:	bf38      	it	cc
 8007a3e:	250c      	movcc	r5, #12
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	4606      	mov	r6, r0
 8007a44:	db01      	blt.n	8007a4a <_malloc_r+0x1a>
 8007a46:	42a9      	cmp	r1, r5
 8007a48:	d903      	bls.n	8007a52 <_malloc_r+0x22>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6033      	str	r3, [r6, #0]
 8007a4e:	2000      	movs	r0, #0
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	f000 f857 	bl	8007b04 <__malloc_lock>
 8007a56:	4a21      	ldr	r2, [pc, #132]	; (8007adc <_malloc_r+0xac>)
 8007a58:	6814      	ldr	r4, [r2, #0]
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	b991      	cbnz	r1, 8007a84 <_malloc_r+0x54>
 8007a5e:	4c20      	ldr	r4, [pc, #128]	; (8007ae0 <_malloc_r+0xb0>)
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	b91b      	cbnz	r3, 8007a6c <_malloc_r+0x3c>
 8007a64:	4630      	mov	r0, r6
 8007a66:	f000 f83d 	bl	8007ae4 <_sbrk_r>
 8007a6a:	6020      	str	r0, [r4, #0]
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	4630      	mov	r0, r6
 8007a70:	f000 f838 	bl	8007ae4 <_sbrk_r>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d124      	bne.n	8007ac2 <_malloc_r+0x92>
 8007a78:	230c      	movs	r3, #12
 8007a7a:	6033      	str	r3, [r6, #0]
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f000 f842 	bl	8007b06 <__malloc_unlock>
 8007a82:	e7e4      	b.n	8007a4e <_malloc_r+0x1e>
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	1b5b      	subs	r3, r3, r5
 8007a88:	d418      	bmi.n	8007abc <_malloc_r+0x8c>
 8007a8a:	2b0b      	cmp	r3, #11
 8007a8c:	d90f      	bls.n	8007aae <_malloc_r+0x7e>
 8007a8e:	600b      	str	r3, [r1, #0]
 8007a90:	50cd      	str	r5, [r1, r3]
 8007a92:	18cc      	adds	r4, r1, r3
 8007a94:	4630      	mov	r0, r6
 8007a96:	f000 f836 	bl	8007b06 <__malloc_unlock>
 8007a9a:	f104 000b 	add.w	r0, r4, #11
 8007a9e:	1d23      	adds	r3, r4, #4
 8007aa0:	f020 0007 	bic.w	r0, r0, #7
 8007aa4:	1ac3      	subs	r3, r0, r3
 8007aa6:	d0d3      	beq.n	8007a50 <_malloc_r+0x20>
 8007aa8:	425a      	negs	r2, r3
 8007aaa:	50e2      	str	r2, [r4, r3]
 8007aac:	e7d0      	b.n	8007a50 <_malloc_r+0x20>
 8007aae:	428c      	cmp	r4, r1
 8007ab0:	684b      	ldr	r3, [r1, #4]
 8007ab2:	bf16      	itet	ne
 8007ab4:	6063      	strne	r3, [r4, #4]
 8007ab6:	6013      	streq	r3, [r2, #0]
 8007ab8:	460c      	movne	r4, r1
 8007aba:	e7eb      	b.n	8007a94 <_malloc_r+0x64>
 8007abc:	460c      	mov	r4, r1
 8007abe:	6849      	ldr	r1, [r1, #4]
 8007ac0:	e7cc      	b.n	8007a5c <_malloc_r+0x2c>
 8007ac2:	1cc4      	adds	r4, r0, #3
 8007ac4:	f024 0403 	bic.w	r4, r4, #3
 8007ac8:	42a0      	cmp	r0, r4
 8007aca:	d005      	beq.n	8007ad8 <_malloc_r+0xa8>
 8007acc:	1a21      	subs	r1, r4, r0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f000 f808 	bl	8007ae4 <_sbrk_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d0cf      	beq.n	8007a78 <_malloc_r+0x48>
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	e7db      	b.n	8007a94 <_malloc_r+0x64>
 8007adc:	200000b8 	.word	0x200000b8
 8007ae0:	200000bc 	.word	0x200000bc

08007ae4 <_sbrk_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4c06      	ldr	r4, [pc, #24]	; (8007b00 <_sbrk_r+0x1c>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4605      	mov	r5, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	f7f9 f924 	bl	8000d3c <_sbrk>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_sbrk_r+0x1a>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_sbrk_r+0x1a>
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	2000089c 	.word	0x2000089c

08007b04 <__malloc_lock>:
 8007b04:	4770      	bx	lr

08007b06 <__malloc_unlock>:
 8007b06:	4770      	bx	lr

08007b08 <_init>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr

08007b14 <_fini>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr
